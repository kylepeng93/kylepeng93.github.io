{"posts":[{"title":"archlinux安装指南","text":"Arch Linux是什么Arch Linux是一款滚动更新的GNU/Linux发行版，致力于提供最新的稳定版软件，相较于其他图形界面的发行版，Arch Linux只能在命令行界面进行安装，且默认不带任何桌面环境。（非特别说明，后文将GNU/Linux简称为Linux） Arch Linux有什么优势相较于其他基于Debian或者Redhat的发行版，Arch Linux提供了自己的包管理器——pacman，而且支持用户软件仓库（AUR）。基于这个特性，大大增加了Arch Linux系统原生软件的数量。而良好的软件生态正是Arch Linux的一大利器。 Arch Linux的安装对于大部分非专业人士而言，习惯了Windows的图形界面之后，突然使用命令行操作软件往往变得非常困难，更不用说安装系统了，尽管Arch Linux拥有详细的由社区维护的安装指南Wiki，但也因此劝退了一些习惯了windows之后想要尝试linux系统的新手，基于此，本文特地将自己安装Arch Linux过程中的经历以及出现的问题做个说明，作为Arch Linux安装wiki的补充，不失为帮助更多的人能够接触到linux的一种方法（windows固然很优秀，但自由/开源软件才是软件开发的未来）。 1、获取最新版镜像官方下载网站：https://archlinux.org/download/ 2、制作启动盘准备一个空的U盘，和一台已安装好linux系统的机器，使用如下命令进行写盘： 1sudo dd bs=4MB if=你的安装镜像路径 of=你的U盘路径 status=progress of参数通常是/dev/sdb，其中sdb是你的U盘路径，注意不要带数字后缀，类似sdb1。另外，写盘之前必须使用umount命令卸载的U盘（如果被自动挂载的话）。 3、从U盘启动，开始安装需要注意的是，为了确保可以正常从启动盘引导，需要关闭主板的安全启动选项（可以在安装完成之后重新打开），关闭方式因主板厂商不同而有所差异。具体如何关闭可以自行百度。 重启主机之后，进入BIOS或者直接通过功能键选择启动顺序，将USB设备作为第一启动项，启动之后选择Arch Linux install medium进入系统安装界面。 4、验证启动模式如果使用的是UEFI模式，则可以使用如下命令验证: 1ls /sys/firmware/efi/efivars 如果命令正常打印出一系列文件和目录，且没有任何错误，则表明当前是以UEFI模式启动。否则则是以BIOS或者CMS模式启动。 5、联网一般来说，我们可以直接插入网线联网，或者使用外置网卡。比如手机的USB网络共享。 6、调整时区使用timedatectl可以查看并设置时区。 123456# 启用ntp（网络时间协议）timedatectl set-ntp true# 列出当前可用的时区timedatectl list-timezones# 设置选择的时区timedatectl set-timezone Asia/Shanghai 7、磁盘分区查看当前可用磁盘 1fdisk -l 选择将要使用的磁盘，假设是/dev/sda，执行如下命令 1fdisk /dev/sda 进入分区界面之后，使用m查看具体的分区指令。一般步骤如下： 12# 创建分区表","link":"/2021/10/02/archlinux-install-guide/"},{"title":"使用aliyun的maven仓库初始化gradle","text":"在linux中使用gradle命令行构建程序时，使用国内镜像可以大大加快我们的构建过程，节约我们的时间，下面就如何配置aliyun仓库作为gradle的默认仓库作出说明。 如果只想对单个项目生效，那么可以在项目的build.gradle中添加如下配置：12345678910111213141516buildscript { repositories { maven {url 'https://maven.aliyun.com/repository/google/'} maven {url 'https://maven.aliyun.com/repository/jcenter/'} } dependencies { classpath: 'com.android.tools.build:gradle:2.2.3' }}allprojects { repositories { maven { url 'https://maven.aliyun.com/repository/google/' } maven { url 'https://maven.aliyun.com/repository/jcenter/'} }} 如果是对所有项目生效，那么需要在用户的家目录下面的.gradle目录下创建init.gradle文件，内容如下：123456789101112131415161718192021222324252627282930313233allprojects{ repositories { def ALIYUN_REPOSITORY_URL = 'https://maven.aliyun.com/repository/public/' def ALIYUN_JCENTER_URL = 'https://maven.aliyun.com/repository/jcenter/' def ALIYUN_GOOGLE_URL = 'https://maven.aliyun.com/repository/google/' def ALIYUN_GRADLE_PLUGIN_URL = 'https://maven.aliyun.com/repository/gradle-plugin/' all { ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository){ def url = repo.url.toString() if (url.startsWith('https://repo1.maven.org/maven2/')) { project.logger.lifecycle &quot;Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL.&quot; remove repo } if (url.startsWith('https://jcenter.bintray.com/')) { project.logger.lifecycle &quot;Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL.&quot; remove repo } if (url.startsWith('https://dl.google.com/dl/android/maven2/')) { project.logger.lifecycle &quot;Repository ${repo.url} replaced by $ALIYUN_GOOGLE_URL.&quot; remove repo } if (url.startsWith('https://plugins.gradle.org/m2/')) { project.logger.lifecycle &quot;Repository ${repo.url} replaced by $ALIYUN_GRADLE_PLUGIN_URL.&quot; remove repo } } } maven { url ALIYUN_REPOSITORY_URL } maven { url ALIYUN_JCENTER_URL } maven { url ALIYUN_GOOGLE_URL } maven { url ALIYUN_GRADLE_PLUGIN_URL } }}","link":"/2021/03/16/aliyun-gradle-config/"},{"title":"下载神器aria2使用手册","text":"aria2是什么东西","link":"/2021/04/01/aria2-manual/"},{"title":"国庆假期之后返回上海后的感想","text":"工作篇兜兜转转，一咋眼的功夫，来上海工作已经两年有余了，刚来上海找工作的那段时间其实心里是没底的，毕竟在上一家公司虽然说也有了两年的工作经验，可是真正学到的东西却没有多少，","link":"/2021/10/08/back-to-shanghai-after-guoqing-holiday/"},{"title":"bash中的常用快捷方式","text":"以alt为辅助键的快捷键 alt+A 跳转到行首 alt+B 跳转到光标后面一个单词长度的位置 alt+C 中断bash中正在执行的任务 alt+D 删除位于光标后面的所有字符 alt+F 移动到光标前面一个单词长度的位置 alt+T 交换光标位置前后的两个单词的位置 alt+U 将位于光标位置后面的第一个单词全部转换成大写字母 alt+L 和alt+U相反，将位于光标位置后面的第一个单词全部转换成小写字母 alt+R 撤销当前命令所有的改变（等同于清空当前所有手动输入过的字符） alt+. 使用上一个命令的最后一个单词（以空格来区分） 以ctrl为辅助键的快捷键 ctrl+A 移动到行首 ctrl+B 向光标后面移动一个字符 ctrl+C 终止正在执行的任务 ctrl+D 向光标后面删除一个字符 ctrl+E 移动到行尾 ctrl+H 删除光标前面的一个字符，相当于退格键 ctrl+J 相当于enter键 ctrl+K 删除所有位于光标后面的字符 ctrl+L 清空屏幕 ctrl+R 查询历史命令 ctrl+O 执行ctrl+R查询出来的命令 ctrl+T 交换最后两个字符 ctrl+U 删除位于光标位置前的字符 ctrl+W 删除光标位置前的一个单词 其他 !! 重复执行上一条命令 ESC+T 交换最后两个单词的位置","link":"/2021/03/14/bash-shortcut-manual/"},{"title":"代码大全读后感","text":"利用隐喻对编程进行更加深刻的理解 公式与启发之间的区别是微妙的，体现在它们与答案之间的直接程度：公式直接给予指令;而启发则告诉你该怎样找到这些指令，或者告诉你到哪里寻找它们。 隐喻仅仅是启发，而不是公式，因此，它们更倾向于比较随便，无拘无束。 为每个工作选择合适的工具，是成为一个优秀程序员的首要素质之一。","link":"/2021/03/18/code-complete-after-reading/"},{"title":"使用netcat工具在两台linux主机之间通信","text":"为什么我们不使用当下流行的即时通讯工具在PC间通信或者传输文件目前国内使用率最高的两款即时通讯工具莫过于鹅厂的两款工具——微信和QQ。因为某些众所周知的原因，这两款工具在linux平台要么直接没有，要么只有一个复古的阉割版，功能少的让人怀疑是不是鹅厂直接把10年前的产品直接拿来用了。基于这些现实的问题，对于linux用户来说，其实可替换方案也不是没有，最好的办法就是使用telegram，但在中国，这种方案并不是人人都能够直接拿来用，最直接的原因就是使用这款软件必须要学会科学上网（比如访问谷歌或者油管）。而科学上网在中国处于法律的灰色地带，一般人没有途径也不愿意承担这样的风险。那么作为一名linux用户，只要具备基本的使用命令行的能力，其实方法还是有很多的。这里介绍一种非常方便而且直观的通讯工具——netcat，供大家参考。 netcat是个什么样的工具netcat是一款网络工具，可以在基于TCP和UDP网络连接的基础上执行读写操作。 它被设计为一个可靠的后端工具，可以直接在其他程序或者脚本中被使用。同时，它还是一个用来调试和探测网络的工具。因为它可以创建几乎所有你可能需要的连接类型。 netcat有哪些特性 流出和流入连接：例如来自基于TCP或者UDP的任意端口的连接。 隧道模式：它允许创建特殊的隧道，如 UDP 到 TCP，并且可以指定所有网络参数（源主机端口/接受主机端口、监听端口/接口和允许连接到隧道的远程主机）。 使用随机发生器进行端口扫描 高级使用选项：例如传输和接收数据的缓冲发送模式（每 N 秒一行）和 hexdump（到 stderr 或到指定文件）。 可选的 RFC854 telnet 代码解析器和响应器。 如何将netcat作为一款即时通讯工具呢 首先，我们需要在需要建立通讯的主机上安装netcat工具，使用linux自带的包管理器安装即可。 然后选择一台已经安装好netcat的机器，在终端中执行如下命令： 1nc -l -vv -p 12345 其中-l和p表示在本机的12345端口进行监听，并创建一个TCP连接。-vv表示尽可能的展示运行过程中的系统消息，-p表示要监听的端口号。 选择要与监听主机建立连接的机器，在终端中执行如下命令： 1nc 步骤2中创建监听的主机ip 步骤2中创建的监听端口 执行完2、3之后，一条连接已经创建完成，可以开始互发消息了。 需要注意的是，连接双方发送的消息会全部展示在各自的屏幕上，如果有多于两个以上的连接方则无法区分消息的来源。 使用netcat传输文件netcat还可以用来传输文件 对接收方执行如下命立： 1nc -l -vv -p 12345 &gt; received_file 在发送方执行如下命令 1nc 接收方的ip地址 12345 &lt; received_file 需要注意的是，这里创建监听的动作是由接收方发起的，而发送方需要和接收方建立连接并发送文件。","link":"/2021/10/02/chat-with-netcat-between-linux-host/"},{"title":"linux下使用crontab工具设置定时任务","text":"使用crontab添加定时任务crontab -e cron的格式说明分钟 小时 月中日 月份 周中日 你的自动化脚本取值范围：分钟：0-59小时：0-23月中日：1-31月份：1-12周中日：0-6 在指定的时间点调度30 08 10 12 * /home/pengkai/myjob.sh上面的调度器会在12月10号的上午8点30分执行myjob.sh脚本。注意，上面最后一个位置使用了*号来表示一周中的每一天。因为已经指定了具体的月日，所以不必再限制那一天是星期几。 查看当前用户下的所有调度任务1$ crontab -l 或者以root用户查看其他用户的任务 1# crontab -u kyle -l 每分钟执行一次调度1* * * * * 你的脚本 一天执行两次1* 12,20 * * * 你的脚本 上面的命令会分别在中午12点晚上8点执行你的脚本 指定起止时间并按照固定间隔执行108-20 * * * 你的脚本 上面的命令会从8点开始执行，然后间隔一个小时再次执行，最后一直到晚上8点截止。 只在工作日的工作时间内执行100 09-18 * * 1-5 你的脚本 从周一开始，每天从上午9点开始执行，然后每隔一个小时再次执行，最后一直到下午6点截止。如此往复到周五晚上6点停止执行。下周继续。 每隔10分钟执行一次1*/10 * * * * 你的脚本 使用特殊字符指定调度周期cron支持的特殊字符@yearly = 0 0 1 1 * ：每年的1月1日执行@daily = 0 0 * * * ： 每天的0点执行@monthly = 0 0 1 * * ：每个月的1号的0点执行@hourly = 0 * * * * ：每个小时执行一次@reboot = 计算器启动时执行","link":"/2021/03/04/cron-manual/"},{"title":"curl命令常见用法","text":"发送post请求 参数类型为application/json 常规用法： 1curl -d '{&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;}' -H &quot;Content-Type: application/json&quot; -X POST http://localhost:8080/your_interface_name 使用json文件： 1curl -d &quot;@data.json&quot; -X POST http://localhost:8080/your_interface_name data.json 1234{ &quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;} 参数类型为application/x-www-form-urlencoded 常规用法： 1curl -d &quot;param1=value1&amp;param2=value2&quot; -X POST http://localhost:8080/your_interface_name 使用data文件： 1curl -d &quot;@data.txt&quot; -X POST http://localhost/your_interface_name data.txt param1=value1&amp;param2=value2 发送GET请求 常规用法： 1curl -X GET http://localhost:8080/user/info?id=1 如果需要显示响应头信息，则可以加上-i参数。","link":"/2021/01/08/curl-command-usage/"},{"title":"设计模式学习手册","text":"设计模式的类别 创造性模式（creational） 创造型模式控制了对象的创建和类的实例化； 结构性模式（structural） 结构型设计模式控制了类和对象之间的关系 表现型模式（behavioral) 表现型设计模式控制了对象之间的交流和交互 设计模式带来的影响范围——确定了解决方案的关注点 对象层面的影响范围——解决对象关系的问题作用于运行期间，对象拥有动态的行为 类层面的影响范围——解决类关系的问题作用于编译期间，类拥有静态的行为","link":"/2021/03/12/design-pattern-tutorial/"},{"title":"docker使用手冊","text":"启动docker实例1sudo docker start 你的镜像名称 关闭docker实例1sudo docker stop 你的镜像名称 查看所有的本地镜像1sudo docker ps -a 或者带上选项q则只会列出容器id（类似369a959e3402） 查看指定命令的帮助手册（有哪些可用选项）1docker 你的命令 --help 安装镜像1docker pull 镜像名 安装并启动镜像1docker run -it --name &lt;容器名称&gt; --hostname &lt;容器主机名&gt; -p 15672:15672 -p 5672:5672 镜像名称 注意，该命令会先在本地查找镜像是否已经存在，如果不存在，则从远程仓库下载，并创建该镜像的一个实例。其中，–name用来指定被创建容器的名称，–hostname被用来指定被创建容器的主机名，-p被用来映射容器端口和本地运行环境端口，最后的镜像名称为远程仓库中已存在的镜像名；-it,其中的i表示交互式运行，t表示开启一个伪终端。 删除指定的容器实例1docker rm 容器名称或者容器id 挂载本地目录，并映射到容器内的存储目录1docker run -it --name mongo -v /mongodb/data/db:/data/db -p 27017:27017 -d mongo:latest 该命令使用-v选项（volumn）将本地目录/mongodb/data/db挂载到容器内的目录/data/db，并使用-d选项将容器实例以后台进程的形式运行。 进入容器实例内部1docker exec -it mongodb bash 该命令会开启一个新的bash shell,而该bash shell对应的是容器内的环境。","link":"/2021/03/12/docker-manual/"},{"title":"分布式搜索引擎-elasticsearch","text":"1. elatsticsearch（简写为es）是什么它是一个实时的分布式、开源的全文本查询和分析引擎，基于java语言开发。 2. es可以做什么它可以在SPA（single page application-单页应用）中被使用，为用户提供高速的数据查询和分析。且原生支持java应用。 3. 主要特性它有如下几个主要特性： 可拓展性强，支持高达千兆字节（GB）的数据（不管是结构性的还是非结构性的）； 可以作为类似MongoDB和RavenDB等文档存储数据库的替代品； 使用非规范化来提高搜索性能； 企业级的搜索引擎，被大型公司广泛使用； 开源工具，且使用Apache许可证。 4. 关键性的概念 节点：表示单个运行的es实例，es可以在单台服务器上运行多个实例，这完全取决于服务器的物理内存和处理器能力； 集群：一个或者多个节点的集合，在逻辑上提供了集中的数据索引和查询能力，通常表现在横跨多个节点获取完整数据的能力。 索引：不同类型的文档和他们的属性的集合。在关系型数据库中，索引一般用于提升查询性能。 文档：一个使用JSON格式定义的字段集合，而这些字段定义了数据查询的规则。每个文档都属于一种类型并驻留在索引中，每个文档都与一个称为 UID 的唯一标识符相关联。 分片：索引被横向拆分成不同的分片，这意味着每个分片包含了所有的文档属性，但包含的 JSON 对象数量少于索引。水平分离使分片成为一个独立的节点，且可以存储在任何节点，主分片是索引的原始水平部分，然后将这些主分片复制到副本分片中。 副本：es允许用户创建索引和分片的副本。复制不仅有助于在发生故障时提高数据的可用性，而且通过在这些副本中执行并行搜索操作来提高搜索性能。 5. es的优势 es 是基于 Java 开发的，这使得它几乎可以兼容所有平台； es 是实时的，也就是说一秒后添加的文档就可以在这个引擎中搜索了； es 是分布式的，这使得它可以轻松地在任何大型组织中扩展和集成。 使用 es 中的网关概念可以轻松创建完整备份。 与 Apache Solr 相比，在 es 中处理多租户非常容易。 es 使用 JSON 对象作为响应，这使得使用大量不同的编程语言调用 es 服务器成为可能。 es 支持几乎所有文档类型，除了那些不支持文本渲染的文档类型。 6. es的缺点 与 Apache Solr 不同，es 在处理请求和响应数据方面没有多语言支持（仅支持JSON），而Apache Solr 可以支持 CSV、XML 和 JSON 格式。 偶尔，es 会出现**脑裂（Split brain）**的问题。（什么是脑裂） 7. es和关系数据库之间的区别在 es 中，索引类似于 RDBMS（关系数据库管理系统）中的表。 每个表都是行的集合，就像 es 中的每个索引都是文档的集合一样。下表给出了这些术语之间的直接比较 - es RDBMS 集群 数据库 分片 分片 索引 表 字段 列 文档 行","link":"/2021/08/20/elasticsearch-tutorial/"},{"title":"在manjaro中修复deepin-wine-wechat对话框输入中文乱码的问题","text":"最近在manjaro上安装了deepin-wine-wechat，毕竟生活中用微信还是挺多的，但腾讯貌似短期内并没有将微信移植到linux桌面平台的打算，所以，作为替代方案，只能使用deepin基于wine定制的微信客户端首先GNU/Linux操作系统作为一款世界流行的操作系统，其稳定性和可定制性都是非常优秀的。但由于众多linux发行版大部分都是从国外发展起来的，虽然近几年来国内也有几家比较优秀的linux厂商，但终究起步别别人晚，所以还是有很多需要提升的地方。对于打着国产操作系统旗号的Deepin团队而言，想要在国内推广他们定制的Deepin Linux发行版，首先在通讯软件方面就要能够提供最常用的几款即时通讯软件的移植版，毕竟国内通讯软件市场还是腾讯一家独大，奈何鹅厂迟迟不将linux平台的QQ、微信的开发提上日程，而目前能够最大限度移植Windows程序到linux上执行的莫过于使用Wine了。所以，基于Wine提供linux版的微信和QQ也成为了最为方便快捷的选择。 这次安装完deepin-wine-wechat之后，正常启动没问题，但当我打开和好友聊天的对话框时发现我输入的中文在内容栏里面都变成了一个个空心的小方块。但当我将消息发送出去之后，我的消息又变成了正常的中文。经过查找资料后发现，是因为wine模拟的windows环境里面缺少了宋体的字体文件，所以，只需要将宋体文件复制到对应的字体目录下就可以了。步骤如下： 1231.下载宋体字符集文件：https://www.freefonts.io/downloads/simsun/2.将解压后的文件复制如下路径：cp ~/Downloads/SIMSUN.ttf ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/3.重启微信即可解决。","link":"/2021/10/26/fix-chinese-luan-ma-in-deepin-wine-wechat/"},{"title":"FormattingConversionService类的使用","text":"它是什么Spring MVC框架中用来解析方法参数的service类。 它有什么用当我们在Spring的配置文件中添加时，如果我们没有明确指定conversion-service属性的值，那么Spring MVC框架会自动使用默认的FormattingConversionService类，它包含了常用的转换方法，将字段转换成标准的JDK类型，另外，如果我们需要date/time的转换器，可以在类路径下引入Joda Time的时间库，它会被默认识别。 使用场合如果我们不需要在字段绑定期间使用自定义的类型转换器，那么我们完全可以使用默认的类。 如果我们需要自定义格式转换器类的话，我们可以继承该类，并将注解中conversion-service属性的值设为我们自己的类（使用类路径引入）。 如果使用的是SpringBoot自动装配的话，则需要在自定义的类上加上@Configuration注解，并使用DateTimeFormatterRegistrar注册器注册我们自定义的日期解析器。然后使用@Autowired添加到Spring容器中。","link":"/2021/01/10/formattingConversionService/"},{"title":"linux上的实用软件清单（个人用）","text":"为什么要列这个清单在使用gnu linux（后面均简称为linux）操作系统的过程当中，总有一些软件让你觉得即使没有windows也能让自己的工作和生活变得更加便利，因此，为了方便后面因为更换发行版或者因为不可控因素导致系统损坏而必须重新安装linux系统，特别将自己平时用的比较多的软件列出来以供后面安装新系统之后能够快速恢复到正常工作和生活状态。个人觉得，对于linux用户来说，相对于windows系统中软件来源的不可控性和零散性，linux系统自带的包管理器绝对是节约我们软件安装时间的一大利器。而且更便于自动化安装和初始化，而作为软件开发者，良好的编程环境更是完胜windows系统。也希望这个清单能让自己在今后的软件开发生涯中更加注重时间的重要性，不要浪费时间在一些无意义的折腾上，毕竟，系统是拿来用的，高效才是操作系统带给我们最终的目的。 以下包管理器均采用archlinux内置的pacman 翻译类软件 带gui的：goldendict、stardict（星际译王）123sudo pacman -S goldendict# 或者sudo pacman -S stardict 字典下载链接 不带gui的：dictd（可以离线使用），translate-shell（必须连上网络） dictd1sudo pacman -S dictd dict dict是客户端，dictd是dict的后台服务器。默认安装之后是不带任何字典的，使用网络查询，且只能查询到英文释义。如果想要支持中文字典的话得自行下载对应的词库，但目前来说官网并不提供中文字典，需要自行将goldendict的字典文件转换成dictd可识别的文件格式。目前个人使用的开源转换工具是pyglossary，该工具使用python编写，支持的格式也比较多，从github上下载到安装文件之后，需要使用pip工具进行安装：123# 先安装pip工具sudo pacman -S python-pipsudo pip install pyglossary-x.x.x-py3-none-any.whl 安装完成之后在终端中输入pyglossary启动工具，并在输入文件时选择goldendict的词典文件（一般是以.ifo后缀名结尾。然后输出文件选择以.index作为后缀的文件类型，点击Convert按钮之前记住将/usr/share/dictd的目录权限授予当前用户，否则无法自动复制过去，且控制台会报错。自用 translate-shell1sudo pacman -S translate-shell 该命令行软件的强大之处在于它集成了目前可用的几大翻译软件，如google翻译、bing翻译（百度翻译待求证）安装完之后，使用如下命令即可翻译英文单词或者句子12345# 翻译单词（英译汉）trans -s en -t zh like# -s en 代表输入的语言类型，-t zh 代表输出的语言类型# 翻译句子trans -s en -t zh &quot;i love you&quot; 或者进入交互模式：1trans -s en -t zh -shell -brief 使用:q退出 翻墙类软件 带gui的：qv2ray、v2ray desktop、v2rayA（web管理界面） qv2ray1sudo pacman -S qv2ray 该工具只支持基于v2ray内核的传输协议，如vmess，不支持shadowsocks协议； v2ray desktop12# 要想使用下面的命令安装该软件，需要配置archlinuxcn的软件源或者使用aur包管理器，比如yay。sudo pacman -S v2ray-desktop 该工具支持shadowsocks协议和基于v2ray内核的vmess协议，而且支持订阅，比较方便，但没有导出功能。相对于qv2ray来说，功能稍显简单，但好在支持的协议比较丰富。 v2rayA1sudo pacman -S v2raya 该工具的强大之处在于支持的协议更多，而且配置简单，支持订阅以及透明代理（比系统代理更加强大，可以代理全局流量）。另外，它的安装包形式也很多样，除了使用系统自带的包管理器安装之外，还支持docker安装、appImage安装。具体配置见github官网。v2raya源码以及使用手册 不带gui的：mellow","link":"/2021/03/16/great-tool-for-linux/"},{"title":"gzip操作手册","text":"gzip工具gzip采用了最流行的压缩算法，可以让你缩小文件的大小，并且保留原始的文件模式，属主和时间戳。使用gzip工具压缩的文件一般使用.gz的文件名后缀，并且gzip也可以用来解压缩文件。 命令格式以及说明通常的语法格式如下： 1gzip [可选项] ... [文件]... gzip只能压缩单个文件，并为给定的文件创建一个压缩之后的文件。根据惯例，压缩之后的文件的命令一把使用.gz或者.z。如果你想将多个文件或者目录压缩到一个文件中，首先你需要创建一个tar包，然后对这个tar包进行压缩。这样的文件一般会使用.tar.gz或者.tgz作为后缀来表明这个文件是使用了gzip压缩之后的tar包。gzip最常用作压缩文本文件，tar包或者网页，尽量不要使用gzip去压缩图片，音频，pdf文档或者其他的二进制文件，因为他们已经被压缩过了。gzip只能压缩常规文件，符号链接文件会被忽略。 使用gzip压缩文件 不带任何参数的压缩1gzip 你的文件 该命令将会创建一个你的文件.gz文件，然后删除原始文件。默认情况下，gzip会保留原始文件的时间戳，模式，属主和文件名。 保留原始文件1gzip -k 你的文件 另外一种保留原始文件的方法是使用-c选项，告诉gzip将原始文件写入到标准输出，然后重定向到指定的文件1gzip -c 你的文件 &gt; 你的文件.gz 查看冗余信息1gzip -v 你的文件 该命令将会输出压缩进度信息 压缩多个文件1gzip 文件1 文件2 文件3 该命令将会生成文件1.gz、文件2.gz、文件3.gz这3个文件。 压缩目录1gzip -r 你的目录 该命令会递归压缩你的目录下的所有文件，分别生成.gz文件。 改变压缩等级gzip允许我们指定文件的压缩等级，范围是1-9，而-1或者--fast则代表使用最小的压缩率以达到最快的压缩速度；而-9或者--best则代表使用最高的压缩率，相应的，也会有最慢的压缩速度。默认的压缩级别是6；1gzip -9 你的文件 压缩是CPU密集型的任务，压缩等级越高，压缩过程越长。 使用标准输入为了从标准输入创建.gz文件，使用管道命令重定向到gzip。1mysqldump database_name | gzip -c &gt; database_name.sql.gz 该命令将会把mysqldump的输出内容作为输入传递给gzip。 使用gzip解压缩 使用-d作为解压缩选项1gzip -d 你的文件.gz 另一个可以用于解压缩的命令是gunzip，它可以算作是gzip -d的别名。1gunzip 你的文件.gz 保留原始压缩文件1gzip -dk 你的文件.gz 解压缩多个文件1gzip -d 你的文件1.gz 你的文件2.gz 你的文件3.gz 解压缩目录下的所有压缩文件1gzip -dr 你的目录 查看压缩文件的内容1gzip -l 你的文件 使用-v可以得到更加详细的信息。","link":"/2021/03/13/gzip-manual/"},{"title":"在linux系统终端查看硬件信息","text":"使用如下命令查看包括CPU、内存、硬盘、主板在内的各种硬件相关的信息 CPU型号 1cat /proc/cpuinfo | grep &quot;model name&quot; | uniq 查看CPU物理个数 1cat /proc/cpuinfo | grep &quot;physical id&quot; | uniq | wc -l 查看内存信息 123# 先安装工具软件，以archlinux为例sudo pacman -S dmidecodesudo dmidecode -t memory | grep Size 查看内存条厂家 1sudo dmidecode -t memory | grep Manufacturer 查看硬盘信息 1fdisk -l | grep &quot;Disk /dev/sd&quot; 查看主板信息 1sudo dmidecode | grep -A16 &quot;System Information$&quot;","link":"/2021/10/05/hardware-info-cmd/"},{"title":"怎么在不开机的情况下让树莓派自动连接上wifi","text":"什么是树莓派树莓派（Raspberry Pi）是一款只有巴掌大小的微型计算机开发板，别看它体积小，但它确实是一个功能完备的计算机，可以做绝大部分我们个人电脑（PC）可以做的事情。而且功耗更小。 树莓派支持的系统目前除了官方主推的Raspberry Pi OS ，还有其他第三方系统，比如基于ubuntu和debian的arm发行版，理论上可以安装微软的Windows，但不推荐，毕竟Windows是收费软件，而且对系统资源相较于linux有更高的要求，作为一款主打轻量级的开发版，Windows显然太重了。 树莓派怎么联网 树莓派自带支持802.11n的以太网网卡，因此可以直接使用支持RJ45的标准网口连接上网； 从Model 3开始，树莓派自带支持802.11n的无线网卡，对于无法通过网线直连的场合，wifi变成了我们唯一的途径。 下面具体就怎么在不开机的情况下配置无线连接做个介绍，方便大家在无线环境中使用树莓派。 不得不说，树莓派自带的无线网卡的性能确实很弱，对于大流量的场景不推荐使用，最好自备外接无线网卡。 安装系统本教程基于Raspberry Pi OS，其他发行版系统可能不适用。下载地址：https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-05-28/2021-05-07-raspios-buster-armhf.zip。 制作启动盘在linux下面可以使用如下命令 1sudo dd if=/home/your_home/raspberryOS.iso of=/dev/sd{x} bs=4MB status=progress 注意，使用上面的命令时必须确保of参数对应的值是你要写入的SD卡，一般以sd开头，if参数对应的是你下载解压后的原始镜像地址。 windows上的启动盘制作请自行百度 写入wifi配置123456789country=CN #这里是我们位于的国家的缩写ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1 #更新现有配置network={ ssid=&quot;你的wifi名称&quot; scan_ssid=1 psk=&quot;你的wifi密码&quot; key_mgmt=WPA-PSK} 将该文件命名为wpa_supplicant.conf，并将其保存到制作好的启动盘的最外层的boot目录下。 允许ssh访问在启动盘的最外层的boot目录下创建ssh文件，不需要向里面写入内容。 最后将制作好的sd卡插入到树莓派中启动即可自动连接wifi,然后我们在路由器管理页面查看已连接设备中就能看到带有raspberry pi标签的设备了，找出其ip地址，尝试下使用ssh连接并管理树莓派，如果一切顺利的话，你将可以通过远程访问来管理你的树莓派设备了。 使用静态ip地址由于树莓派内置了DHCP服务，所以，当我们每次连接上wifi时可能会被分配到不同的ip地址，这显然不利于配置外部对于树莓派后台服务的访问，因此，我们在连接上wifi之后，可以给树莓派配置一个静态ip。 打开/etc/dhcpcd.conf文件，向里面追加如下配置 1234interface wlan0static ip_address=192.168.0.193/24static routers=192.168.0.1static domain_name_servers=192.168.0.1 192.168.1.1 其中wlan0是我们无线网卡的系统名称，后面的ip_address则是我们自定义的ip地址，routers是我们的路由，domain_name_server是我们的DNS地址，多个DNS的场合使用空格隔开。","link":"/2021/09/26/how-raspberry-pi-connect-to-wifi-without-boot/"},{"title":"在gnome桌面环境下设置默认文件管理器","text":"gnome桌面设置工具中默认无法设置默认的文件管理器，所以，当我们在kde桌面环境下设置了dolphin为文件管理器之后，重新切回到gnome之后会发现dolphin仍然是默认的文件管理器，所以，我们需要将gnome桌面默认的Nautilus文件管理器重新设为默认值，以下命令可以帮助我们做到这一点：1xdg-mime default org.gnome.Nautilus.desktop inode/directory 上述命令会修改~/.config/mimeapps.list的内容，具体内容如下： 1inode/directory=org.gnome.Nautilus.desktop 分别对应[Default Applications]和[Added Associations]目录。","link":"/2021/10/20/how-to-set-default-file-manager-for-gnome/"},{"title":"如何vps上搭建自己的git服务器","text":"介绍","link":"/2020/12/29/how-to-set-up-a-private-git-server-on-your-vps/"},{"title":"面试指南","text":"1、说下你的优点和缺点 缺点： 公开演讲","link":"/2021/10/07/interview-guide/"},{"title":"java知识点速记","text":"java bean和pojo的区别一、 定义 POJO是Plain Old Java Object的缩写，它主要用来强调某个对象是一个普通的Java对象，而不是一个特殊的对象，尤其不是一个EJB。 这个术语以其简单易懂的特性被广泛接受并使用，并用来区别那些复杂的对象框架。 一个JavaBean是一个可以被序列化的POJO。有一个默认的无参构造器，并允许使用Getter和Setter方法访问属性。 对于EJB来说，JavaBean并不是一个单独的类，而是整个组件模型。 JavaBean是java构建程序中可重用的软件组件，实际开发过程中，它们是使用java语言编写并符合某个约定的类。它们被用来封装一些对象到单个对象（也就是bean）中。 二、 用法 POJO主要被用来表明一个java对象不需要跟随任何java对象模型、约定或者框架。最理想的情况，一个POJO应该是一个不和任何框架绑定的java对象，并遵循以下原则： 不应该继承某个指定的类，比如HttpServlet； 不应该实现指定的接口，比如EntityBean； 不应该包含某些框架的注解。 JavaBean应该遵循以下原则： 必须有一个公共的默认构造器，便于实例化； 属性必须可以通过Getter和Setter或者其他的可以访问并修改的方法进行控制，并遵循标准的命名规范，以便于框架对其进行自动化管理和状态的更新； 必须可以被序列化，以便于应用和框架以一种独立于VM和操作系统的方式对其进行可靠的保存、存储以及恢复bean的状态。 对于业务程序员来说，这两种类型的java对象其实可以等同，或者说POJO更多强调的是一种业务概念，而JavaBean则属于java编程语言的特性。","link":"/2021/01/07/java-point/"},{"title":"jenkins学习笔记","text":"","link":"/2021/03/30/jenkins-study-notes/"},{"title":"jsp-tag-usage-1","text":"","link":"/2021/01/08/jsp-tag-usage-1/"},{"title":"mybatis原理学习笔记","text":"mybatis的执行原理：通常一个Mapper接口对应一个xml文件，Mapper接口中的方法名对应xml中的标签id，而xml中的每一个标签都会被解析为MapperStatement对象。通过xml中定义的namespace属性，可以和接口方法的执行路径相对应。而这个路径应该具有唯一性，所以Mapper接口中的方法不能被重载。Mapper接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Mapper接口生成代理对象，代理对象会拦截接口方法，转而执行MapperStatement所代表的sql语句，然后将执行结果返回。 mybatis的分页原理：Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内容分页，而非物理分页。 mybatis-pagehelper插件的实现原理：使用mybatis提供的插件接口，实现自定义插件，在插件内拦截待执行的sql,然后重写sql,根据dialect方言，添加对应的物理分页语句和物理分页参数。","link":"/2021/01/04/mybatis-theory-interview/"},{"title":"nmap命令使用教程","text":"扫描单个目标地址： 1nmap 192.168.0.100 扫描多个目标地址 1nmap 192.168.0.100 192.168.0.105 扫描一个范围内的目标地址 1nmap 192.168.0.100-200 扫描目标地址所在的某个网段： 1nmap 192.168.0.100/24 扫描主机列表targets.txt文件中的所有目标地址 1nmap -iL ~/targets.txt 扫描除某一个目标地址之外的所有目标地址 1nmap 192.168.0.100/24 -exclude 192.168.0.105 扫描除某一文件中的目标地址之外的目标地址 1nmap 192.168.0.100/24 -exceludefile ~/targets.txt 扫描某一目标地址的21、22、23、80端口 1nmap 192.168.0.100 -p 21,22,23,80 对目标地址进行路由跟踪 1nmap --traceroute 192.168.0.100 扫描目标地址所在C段的在线状况 1nmap -sP 192.168.0.100/24 目标地址的操作系统指纹识别 1nmap -O 192.168.0.100 目标地址提供的服务版本检测 1nmap -sV 192.168.0.105 探测防火墙状态 1nmap -sF -T4 192.168.0.100","link":"/2021/08/08/namp-command-tutorial/"},{"title":"netty高性能web服务器介绍","text":"1. 什么是nettyNetty是一个异步的事件驱动网络应用框架。 它的主要用途是构建高性能协议服务器，并通过基于隔离和松耦合的网络和业务逻辑组件的NIO（非阻塞输入输出）技术实现这一点。它可以实现广为人知的Http协议或者我们自定义的协议。 2. netty的核心概念netty是一个非阻塞式框架，和阻塞式IO相比，它拥有更高的吞吐量。理解非阻塞式IO是掌握Netty的核心组件以及他们之间的关系的关键所在。 2.1 Channel（通道）Channel是NIO的基石，它代表了一个拥有IO（读和写）处理能力的开放连接。 2.2 Future对于Netty来说，Channel中的每一个连接都是非阻塞的。 这意味着每个操作在调用之后都会立刻返回。标准Java库中有一个Future的接口，但是它并不能方便的完成Netty的意图，因为我们只能通过这个接口去查询操作是否已完成或者阻塞当前线程直到操作完成。 基于上面的原因，Netty实现了自己的ChannelFuture接口。我们可以通过回调函数告诉ChannelFuture，一旦操作完成，将要执行的操作。 2.3 事件和处理器Netty使用了基于事件驱动的应用模式，因此数据处理的管道（pipeline）本质上是贯穿处理器（handler）的一连串事件的链（chain）。事件和处理器类似于数据的流入以及流出。流入事件可以是下面的几种： 通道的激活和失活 读事件 异常事件 用户事件 流出事件则比较简单，一般类似于打开或者关闭连接以及写入数据。 Netty应用包含了几个网络和应用的逻辑事件以及他们对应的处理器。channel事件处理器可以使用的基础接口分别是ChannelHandler和它的祖先ChannelOutboundHandler和ChannelInboundHandler。 Netty提供了大量的ChannelHandler接口的实现类。值得注意的是，适配器只是空的实现，例如ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter。我们可以继承这些适配器当我们只需要处理所有事件集合中的子集。 同样，Netty包含了某些指定协议的具体实现，比如Http。HttpRequestDecoder，HttpResponseEncoder，HttpObjectAggregator。你可以通过Netty的javaDoc去了解他们的用法。 2.4 编码器和解码器当我们使用网络协议时，我们需要对数据进行序列化和反序列化。出于这个目的，Netty引进了一个特殊的解码拓展类ChannelInboundHandler，它可以对进来的数据进行解码。大多数解码器的基类是ByteToMessageDecoder。 为了编码出去的数据，Netty也提供了一个特殊的编码实现类ChannelOutboundHandler。MessageToByteEncoder是大多数编码实现类的基类。通过编码器和解码器，我们可以将信息从字节序列转换成java对象，反之亦然。","link":"/2021/01/09/netty-intro/"},{"title":"php——使用pdo连接mysql数据库","text":"PDO是什么PDO（PHP Data Objects）拓展是一个轻量级、而且统一的接口，用来在PHP中访问数据库。 PDO提供了一个数据访问抽象层，这意味着，不管你使用的是什么数据库，你都可以使用相同的函数去执行查询并获取数据。 PDO不提供数据库抽象，无法消除不同数据库之间的语法差异，如果你想要做到做到这一点，你必须使用另外的抽象层去实现。 PDO连接MySQL数据库1234567891011121314151617// 数据库主机地址const DB_HOST = 'mysqldb';// 数据库名称const DB_NAME = 'default';// 数据库用户名const DB_USER = 'root';// 数据库密码const DB_PASSWORD = 'devstack';// 连接对象private $pdo = null;// 格式化连接字符串$conStr = sprintf(&quot;mysql:host=%s;dbname=%s&quot;, self::DB_HOST, self::DB_NAME);try { $this -&gt; pdo = new PDO($conStr, self::DB_USER, self::DB_PASSWORD);} catch (PDOException $e) { echo $e -&gt; getMessage();} 使用pdo连接对象执行插入、更新或者删除1234567891011$sql = &quot;insert into tasks (subject, start_date, end_date, description) values ('%s', '%s', '%s', '%s');&quot;;$insertStatement = &quot;&quot;;// 构造插入语句// date(&quot;Y-m-d H:i:s&quot;)的输出格式为yyyy-mm-dd hh:mm:ssfor ($i = 0; $i &lt; 10; $i++) { $insertStatement .= sprintf($sql, &quot;睡觉&quot;, date(&quot;Y-m-d H:i:s&quot;), date(&quot;Y-m-d H:i:s&quot;), &quot;测试&quot;);}// 使用exec方法执行插入$this -&gt; pdo -&gt; exec($insertStatement);// 更新和删除都可以使用exec()，返回值为表的影响条数 使用pdo连接对象执行查询123456$sql = &quot;select * from tasks&quot;;foreach ($this -&gt; pdo -&gt; query($sql) as $row) { print $row['subject'] . &quot;\\t&quot;; print $row['start_date'] . &quot;\\t&quot;; print $row['end_date'] . &quot;\\n&quot;;} 使用query方法可以执行查询操作。通过foreach遍历查询结果。","link":"/2021/08/10/php-connect-mysql-with-pdo/"},{"title":"redis命令学习","text":"redis存储string类型的值 存值： 1set key value 取值： 1get key 返回key中的部分字符串: 1getrange key start end start从0开始，且返回的内容中包含索引为end的字符。 取出旧值并返回新值： 1getset key new_value 取出key对应的值，并返回指定偏移量上的位(bit)： 1getbit key offset 一次性取出多个值 1mget key1 key2 ... 当key不存在时才设值： 1setnx key value 删除指定key 1del key 返回给定key的超时时间 1ttl key 查看key的类型 1type key redis系统管理命令 给redis服务器设置密码 1234567891011$ redis-cli127.0.0.1:6379&gt; config set requirepass my_password# 获取密码127.0.0.1:6379&gt; config get requirepass(error) NOAUTH Authentication required.# 使用设置过的密码登陆127.0.0.1:6379&gt; auth my_passwordOK127.0.0.1:6379&gt; config get requirepass1)&quot;requirepass&quot;2)&quot;my_password&quot; 需要注意的是，上面的设置方式在redis服务器重启之后便会失效，如果需要重启后仍然有效，则可以修改配置文件 打开/etc/redis/redis.conf，修改如下地方： 1# requirepass foobared 改成如下内容 1requirepass my_password 保存之后重启redis服务器即可生效。 redis模糊查询 查询所有的key 1keys * 单字符匹配 1keys h?llo # 可以匹配hello、hallo和hxllo等 多字符匹配 1keys h*llo # 可以匹配hello、heeeello等 范围内匹配 1keys h[ae]llo # 可以匹配hallo、hello","link":"/2021/01/03/redis-commander-study/"},{"title":"在ubuntu上创建自己的samba服务器","text":"samba类Unix（Gnu/Linux）操作系统上用来和标准Windows文件系统互相通信的一种程序套件；Samba允许类Unix系统和Windows系统共享文件和打印机，忽略两个系统间的差异性，从而实现共存。 在ubuntu上安装Samba1sudo apt update &amp;&amp; sudo apt install -y samba 修改配置文件，设置共享目录12# 创建共享目录$ mkdir /tmp/share 12# 将共享目录添加到配置文件中$ sudo vim /etc/samba/smb.conf 将下面的内容追加到文件末尾： 12345[share] comment = Samba share directory # 共享目录说明 path = /tmp/share # 共享目录的系统路径 read only = yes # 是否只读 browsable = yes # 是否可浏览 修改默认端口（适用于公网访问的场景，内网访问可以不用修改）1$ sudo vim /etc/samba/smb.conf 将下面的内容追加到[global]部分的末尾（如果端口配置已存在，则直接修改端口号） 123[global] ... smb ports = 4450 1390 #想要指定的端口号，原本为445 139 重启smbd守护进程1$ sudo systemctl restart smbd 查看修改后的端口号是否生效12$ ss -nltp | grep 4450$ ss -nltp | grep 1390 配置防火墙ufw1234# 如果开启了ufw,则需要将samba服务添加到允许访问服务列表中sudo ufw allow samba# 如果重新配置了端口，则需要指定允许访问的端口号sudo ufw allow [port] # 可以在端口号后面加上tcp或者udp,如1390/tcp、1390/udp 创建samba用户账户samba默认不使用系统账户，因此，我们需要为共享目录设置一个用户名和密码： 12sudo smbpasswd -a $USER# 该命令会将当前用户加入到samba的用户中，并提示设置该用户对应的密码 验证samba服务的可用性12345sudo apt install smbclient# 验证可用的samba共享目录smbclient -L samba_server_ip# 如果修改了默认端口号，还需要手动指定端口号smbclient -p 1390 -L samba_server_ip 如果服务正常的话，会出现如下内容： 123456789Enter WORKGROUP\\pengkai's password: Sharename Type Comment --------- ---- ------- sambashare Disk Samba And linux www-data Disk apache web root print$ Disk Printer Drivers IPC$ IPC IPC Service (kyleVps server (Samba, Ubuntu))SMB1 disabled -- no workgroup available 在终端中连接samba共享目录1234567891011smbclient -U [user] [-p port] //[samba_ip]/[share_directory] # 上述命令需要指定登陆用户和samba服务器ip以及共享目录，随后系统会提示输入密码# 密码验证通过之后会进入smb的命令行交互界面：Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; ls . D 0 Sun Feb 21 18:42:49 2021 .. D 0 Sun Feb 21 18:42:18 2021 Test File N 20 Sun Feb 21 18:42:49 2021 971515904 blocks of size 1024. 843676384 blocks availablesmb: \\&gt; 将samba挂载至指定目录下1未完待续 至此，samba的安装、配置和使用就说完了。","link":"/2021/08/08/samba-server-tutorial/"},{"title":"shiro的权限管理之访问许可（permission）","text":"1. Apache Shiro中的permission是什么Shiro 将 Permission 定义为代表某个明确行为或动作的语句。 它是应用程序中原始功能的声明，仅此而已。 权限是安全策略中最低级别的结构，它们仅明确定义应用程序可以做什么，而不会描述谁可以做这些动作。（和subject即认证主体无关） 2. permission体现在哪些地方 打开一个文件 访问/user/list路径下的网页 打印文档 删除某个用户 定义“谁”（用户）被允许做“什么”（权限）是一种以某种方式为用户分配权限的运用，这始终由应用程序的数据模型完成，并且可能因应用程序而异。 例如，权限可以归入一个角色，并且该角色可以与一个或多个用户对象相关联。 或者一些应用程序可以有一个用户组，一个组可以分配一个角色，通过传递关联意味着该组中的所有用户都被隐式授予角色中的权限。 向用户授予权限的方式有多种变化——应用程序根据应用程序要求确定如何对此进行建模。 3. 通配符权限上面的权限示例中，“打开文件”，“查看‘用户/列表’网页”等都是有效的权限声明。 然而，在计算上解释这些自然语言字符串并确定是否允许用户执行该行为将是非常困难的。因此，为了实现易于处理但仍然可读的权限语句，Shiro 提供了强大而直观的权限语法，我们称之为通配符权限。 3.1 简单应用假设您想保护对公司打印机的访问，以便某些人可以打印到特定的打印机，而其他人可以查询当前队列中的作业。 一种极其简单的方法是授予用户“queryPrinter”权限。 然后您可以通过调用来检查用户是否具有 queryPrinter 权限： 1subject.isPermitted(&quot;queryPrinter&quot;) 这等价于： 1subject.isPermitted( new WildcardPermission(&quot;queryPrinter&quot;) ) 这还不够，简单权限字符串可能适用于简单的应用程序，但它需要您拥有“printPrinter”、“queryPrinter”、“managePrinter”等权限。您也可以使用通配符授予用户“*”权限（授予此权限） 构造其名称），这意味着它们拥有整个应用程序的所有权限。 但是使用这种方法，不能只说用户拥有“所有打印机权限”。 因此，通配符权限支持多级权限。 3.2 多个部件通配符权限支持多个级别或部分的概念。 例如，您可以通过授予用户权限来重构前面的简单示例 1printer:query 本示例中的冒号是一个特殊字符，用于分隔权限字符串中的下一部分。 在此示例中，第一部分是正在操作的域（打印机），第二部分是正在执行的操作（查询）。 上面的其他示例将更改为： 12printer:printprinter:manage 可以使用的部件数量没有限制，因此就可以在您的应用程序中使用它的方式而言，这取决于您的想象力。 3.2.1 多个值每个部分可以包含多个值。 因此，与其同时授予用户“printer:print”和“printer:query”权限，您还可以简单地授予他们一个权限： 1printer:print,query 这使他们能够打印和查询打印机。 并且由于他们被授予了这两个操作，您可以检查用户是否有能力通过调用来查询打印机： 1subject.isPermitted(&quot;printer:query&quot;) 这将返回 true。 3.2.2 全部的值如果您想授予用户特定部分的所有值怎么办？ 这样做比手动列出每个值更方便。 同样，基于通配符，我们可以做到这一点。 如果打印机域有 3 个可能的操作（查询、打印和管理），则： 1printer:query,print,manage 可以简化为： 1printer:* 然后，对“printer:XXX”的任何权限检查都将返回 true。 以这种方式使用通配符比显式列出操作更有效，因为如果稍后向应用程序添加新操作，则无需更新在该部分使用通配符的权限。 最后，还可以在通配符权限字符串的任何部分使用通配符标记。 例如，如果您想授予用户跨所有域（不仅仅是打印机）的“查看”操作，您可以授予以下权限： 1*:view 然后对“foo:view”的任何权限检查都将返回true。 未完待续：https://shiro.apache.org/permissions.html","link":"/2021/09/03/shiro-permission-guide/"},{"title":"Spring框架中bean的生命周期","text":"使用@PostConstruct和@PreDestroy注解在同一个配置类中执行bean的初始化前和销毁前的配置1234567891011121314151617@Configurationpublic class MyBeanPostProcessor { @Bean public String helloWorld() { return &quot;hello world&quot;; } @PostConstruct public void init() { System.out.println(&quot;我是初始化前执行的方法&quot;); } @PreDestroy public void destroy() { System.out.println(&quot;我是销毁前执行的方法&quot;); }} 上面的配置类中只定义了一个bean，且是字符串类型（方便举例），大部分情况下应该是返回一个对象。 使用@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)注解执行bean初始化前和销毁前的配置123456789101112131415161718@Configurationpublic class ConfigTest { @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;) Test1 test1() { return new Test1(); // 使用默认的无参构造器 }}// 定义Bean的内容，本质上是一个普通的java类public class Test1 { // 初始化前的执行方法 public void init() { System.out.println(&quot;this is init method&quot;); } // 销毁前的执行方法 public void destroy() { System.out.println(&quot;this is destroy method&quot;); }}","link":"/2021/08/09/spring-bean-init-and-destroy/"},{"title":"Spring框架中bean的前置处理和后置处理","text":"Spring框架中Bean的创建过程如下： 其中BeanPostProcessor接口包含两个执行过程，分别是在bean执行init方法之前和执行init方法之后执行。代码如下： 1234567891011121314151617181920212223242526@Configurationpublic class MyBeanPostProcessor implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;我在bean初始化前执行&quot;); return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName); } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;我在bean初始化之后执行&quot;); return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName); } @Bean(name = &quot;DBConnection&quot;, initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;) public DatabaseConfig mysqlConnection() { Properties properties = System.getProperties(); String url = properties.getProperty(&quot;url&quot;); String driverName = properties.getProperty(&quot;driverName&quot;); String userName = properties.getProperty(&quot;userName&quot;); String password = properties.getProperty(&quot;password&quot;); return new DatabaseConfig(driverName, url, userName, password); }} 上述代码新建了自定义的MyBeanPostProcessor,并实现了接口BeanPostProcessor中的两个接口（自带default方法），同时，还定义了一个名为DBConnection的bean，指定了初始化方法和销毁前执行的方法。 其中，DatabaseConfig的定义如下： 12345678910111213141516171819202122232425@Datapublic class DatabaseConfig { private static Connection connection; private String driverName; private String url; private String userName; private String password; public DatabaseConfig(String driverName, String url, String userName, String password) { this.driverName = driverName; this.url = url; this.userName = userName; this.password = password; System.out.println(&quot;构造连接参数...&quot;); } public void init() { System.out.println(&quot;初始化数据库连接&quot;); } public void destroy() { System.out.println(&quot;销毁数据库连接&quot;); }} 为了方便识别执行阶段，分别在构造器和init以及destroy方法中加入了文字说明。 最后的执行结果如下： 123456构造连接参数...我在bean初始化前执行初始化数据库连接我在bean初始化之后执行...销毁数据库连接 由此可见，构造器内的代码是最先执行的，属于填充属性阶段（即Populate properties），接着执行MyBeanPostProcessor#postProcessBeforeInitialization方法，然后执行init方法，之后执行MyBeanPostProcessor#postProcessBeforeInitialization，最后在关闭应用时执行destroy方法。","link":"/2021/08/09/spring-bean-post-processor/"},{"title":"Spring框架中的异常处理方式","text":"1. 在控制层验证参数@RequestParam(“arg”)可以用来限制调用方只能使用arg作为参数名来调用接口。","link":"/2021/01/09/spring-exception-handle/"},{"title":"spring-framework-core-thinking-1","text":"spring框架进阶—Aware接口的原理和使用","link":"/2021/08/08/spring-framework-core-thinking-1/"},{"title":"spring实战","text":"认识spring框架 spring框架为开发者做了很多，反过来，它也要求开发者同样对它。","link":"/2021/03/14/spring-in-action/"},{"title":"springmvc注解学习","text":"annotation-driven配置注解驱动的Spring MVC控制器编程模型。 可选参数： conversion-service：指定字段转换服务 validator：指定自定义的校验类，用来校验控制器中的model对象，默认使用JSR-303校验 resources配置静态资源的处理器，比如说图片、js、css，通过对缓存头进行优化，提升浏览器的加载速度。允许Spring资源处理器能够识别任何指定路径下的静态资源。 可选参数： mapping：必须，指定URL的映射方式，基于当前的Servlet上下文，比如/resources/**则表示需要在url中加上resources，然后追加静态资源相对于根路经的目录结构路径。 location：必须，指定静态资源的物理路径，多个路径可以使用逗号隔开，放在前面的会被优先读取（如果有两个同名的文件，会优先读取放在前面的路径下的文件），例如：/,classpath:/META-INF/public-web-resources/，将会读取位于web应用根路径下的静态资源以及类路径下的所有Jar包中/META-INF/public-web-resources目录下的文件，而web应用根路径下的文件优先级更高。 cache-period：可选，指定静态资源的缓存策略。以秒为单位。默认情况下不会发送任何缓存头，而是取决于文件上次修改的时间戳。如果将该属性的值设为0,则会发送值为prevent-cacheing的缓存头。如果是大于0的值，则会发送max-age为该值的缓存头。 order：可选，指定资源处理器的顺序。 default-servlet-handler用来配置处理静态资源的处理器（handler），通过将请求重定向到容器默认的servlet。使用这个处理器允许/映射与DispatcherServlet一起使用，同时仍利用Servlet容器提供静态资源服务。 可用属性： default-servlet-name：可以重定向客户端静态资源请求的默认Servlet。默认的处理器在启动时会自动检测容器默认的Servlet（通过一个预定义的名字列表）。只有在默认但Servlet无法被检测到的情况下，才需要明确指定默认Servlet的名字。 interceptors：注册自定义的拦截器（父标签） interceptor：自定义拦截器必须继承HandlerInterceptor类或者实现WebRequestInterceptor接口。 可用属性 mapping： path：指定被拦截的url路径，例如/myPath或者/myPath/** ref：指定bean的引用。 view-controller用来定义渲染返回视图的简单控制器 可用属性： path：必须。被映射的URL路径。 view-name：可选。被渲染的视图名，如果不指定，则通过当前HttpServletRequest对应的DispatcherServlet的RequestToViewNameTranslator来决定。","link":"/2021/01/10/spring-mvc-annotation/"},{"title":"如何使用openssh进行远程连接","text":"SSH连接的建立方式ssh可以通过密码和密钥（更加安全）这两种方式建立起客户端与 服务端的连接。 SSH连接的实现过程（假设通过密钥的方式连接） 当客户端发起一个ssh连接请求时，它首先会告诉服务端需要使用的公钥； 然后服务端会检查它的~/authorized_keys文件，这个文件中包含了所有已经保存的客户端公钥，一个公钥占据一行，这些公钥所对应的客户端可以实现免验证登录。 服务端如果在文件中找到了请求客户端所对应的公钥，就会生成一个随机字符串，并使用找到的公钥进行加密。这个加密后的信息只能被请求客户端的私钥所解密，然后服务端将这个加密后的字符串发送给请求客户端，以此来验证该客户端是否拥有私钥。 客户端收到来自服务端的加密字符串之后，会立即使用自己的私钥进行解密，并将解密后的随机字符串与之前协商好的会话id结合，生成一个md5加密的hash值，并回传给服务端。 由于服务端已经知道加密之前的随机字符串和会话id，因此，服务端会在本地将这个随机字符串和会话id进行hash，然后和客户端传过来的值进行比较，如果一致，则表示请求客户端确实拥有私钥，并允许建立连接。 生成SSH密码对有几种加密算法可以用来生成SSH密钥，例如RSA、DSA、ECDSA，默认情况下使用RSA加密算法。使用如下命令可以生成一个默认的密钥： 1$ ssh-keygen 12Generating public/private rsa key pair.Enter file in which to save the key (/home/demo/.ssh/id_rsa): 这里可以指定密钥文件的保存位置。默认是~/.ssh/id_rsa。点击enter进入下一步： 12Enter passphrase (empty for no passphrase):Enter same passphrase again: 这里可以指定密钥的密码短语，即在密码之上再加一层密码验证，增强密钥的安全性。点击enter进入下一步： 12345678910111213141516Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:8c:e9:7c:fa:bf:c4:e5:9c:c9:b8:60:1f:fe:1c:d3:8a root@hereThe key's randomart image is:+--[ RSA 2048]----+| || || || + || o S . || o . * + || o + = O . || + = = + || ....Eo+ |+-----------------+ 这时，你的密钥对就算生成成功了。生成的文件如下： ~/.ssh/id_rsa:存放你的私钥。只能你自己知道。 ~/.ssh/id_rsa.pub:存放你的公钥，可以让其他人知道。使用更长的位数生成你的密钥对默认情况下，ssh-keyken使用2048的位长度生成密钥对。这一默认值大多数场合已经足够安全，但是，我们在某些特殊场景下仍然可以使用更大的位长度来增强我们服务器的安全性。为了做到这一点，我们可以使用-b参数来指定我们需要的位长度。比如：1$ ssh-keygen -b 4096 如果你之前已经生成过一个密钥对，那么这里会提示你是否需要覆盖你之前的键：1Overrite(Y/n)? 如果你选择是，那你之前的文件会被覆写，导致你再也无法使用之前的密钥登录到之前的服务器，因此，一定要小心之前的密钥是否需要保留。移除或者修改私钥的密码短语(passphase)如果你已经为你的私钥指定了一个密码短语，该怎么修改或者直接删除这个密码短语呢？为了修改或移除密码短语，你必须知道原来的密码短语。如果你忘记了原来的密码短语，你将无法再次使用该密钥，必须重新生成新的密钥。 通过下面的命令：1$ ssh-keygen -p 1Enter file in which the key is (/root/.ssh/id_rsa): 你可以指定密钥的位置，或者直接按Enter接受默认的位置。1Enter old passphrase: 输入你希望修改的旧密码，然后你会被提示输入一个新的密码短语：12Enter new passphrase (empty for no passphrase):Enter same passphrase again: 至此，输入你的新密码短语或者按Enter来移除密码短语。展示SSH密钥的手印（Fingerprint）每个SSH密钥对共享一个密码形式的“手印”，它可以被用来唯一标识密钥对。这在有些情况下会很有用。为了查看现有的密钥对，你可以执行：1$ ssh-keygen -l 1Enter file in which the key is (/root/.ssh/id_rsa): 你可以直接按Enter选择默认的密钥的位置，或者输入你期望的位置。之后你会得到包含了密钥的位长、手印和帐号以及所选主机和使用的算法的字符串：14096 8e:c4:82:47:87:c2:26:4b:68:ff:96:1a:39:62:9e:4e demo@test (RSA) 使用SSH-Copy-ID复制公钥到服务器通过将你的公钥复制到服务器，可以让你不用输入密码就可以通过认证，有很多方法可以实现这一点。如果你当前有一个基于密码的SSH远程服务器访问方式，并且你已经安装了ssh-copy-id工具，那么你就可以很容易的实现这一点。而且ssh-copy-id已经预装到了大多数的linux发行版中。通过下面的命令可以实现这一点：1$ ssh-copy-id username@remote_host 随后会提示你输入当前用户在远程服务器上的密码，正确输入之后，你本地的公钥就会被添加到服务器用户的~/.ssh/authorized_keys文件中，之后，你就可以不用输入密码也能登录到远程服务器了。不通过ssh-copy-id命令将公钥添加到远程服务器如果你没有安装ssh-copy-id命令行工具，那你应该怎么样将你的公钥上传到远程服务器呢？通过linux中的管道命令，我们可以实现这一点。 1$ cat ~/.ssh/id_rsa.pub | ssh username@remote_host &quot;mkdir -p ~/.ssh &amp;&amp; ~/.ssh/authorized_keys&quot; 随后根据提示输入远程主机的用户名密码： 1234The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established.ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.Are you sure you want to continue connecting (yes/no)? yesdemo@111.111.11.111's password: 如果添加成功，你之后的登录将无需再次输入密码，而是简单的通过如下命令： 1$ ssh username@remote_ip_host 手动将你的密钥复制到服务器如果你没有可用的基于密码访问的SSH连接，你将必须手动将你的公钥复制到远程服务器。打开你的本地终端，输入下面的命令： 1$ cat ~/.ssh/id_rsa.pub 将输出到屏幕上的公钥复制到剪贴板，然后通过工具（一般是服务器供应商提供的web面板）连接到远程服务器，并在远程服务器的~/.ssh/（如果不存在就新建）目录下面创建authorized_keys文件。最后将你复制的公钥粘贴到该文件中，并保存。 基本的连接指令接下来是针对SSH中一些比较常用的命令做个说明。 连接到指定的远程服务器1$ ssh remote_host 这个命令会假设你当前机器的本地用户名和远程服务器上的用户名是一致的。如果不一致，请使用下面的命令。 1$ ssh username@remote_host 这个命令会假设你要连接的远程服务器的端口号是22（ssh默认的端口号）。如果不是，请使用-p your_port指定你的自定义端口号。如果服务器正常开启了ssh服务以及对应的监听端口，那么你会看到如下信息： 123The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established.ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.Are you sure you want to continue connecting (yes/no)? yes 输入”yes”即可接受来自远程服务器的验证。如果你使用了密码验证，那么你会被要求输入密码，如果你使用了公钥免登录，且设置了密码短语，那么你将同样被要求输入密码短语，否则，你将自动登录成功。 在远程服务器上执行单次命令如果你只是想在远程服务器上执行单个命令，并不想开启一次远程会话。那么你可以通过下面的命令来完成： 1$ ssh username@remote_host commander_to_run 这个命令会在连接上远程服务器之后立即执行后面的命令，随后便会关闭连接。 使用配置文件简化连接输入在~/.ssh目录下新建config文件（如果不存在的话），并输入如下内容： 12345Host remote_aliss # 远程主机别名 HostName remote_host #远程主机 Port port_num # 端口号 User your_user # 登录用户 IdentityFile ~/.ssh/id_rsa # 要使用的密钥 配置完成之后，之后的连接只需要通过输入如下命令即可： 1$ ssh remote_alias 使用SSH Agent保存密码短语，避免重复输入如果你对密钥使用了密码短语进行加密，那么你在每次建立SSH连接会话之前都会要求输入密码短语，为了简化连接过程，避免每次都要重复输入，你可以使用SSH Agent来保存你的密码短语。","link":"/2020/12/27/ssh-manual/"},{"title":"string-in-file-search","text":"在指定目下寻找包含指定字符串的文件： 输出文件名和内容 1grep mysqli_connect ./ 其中，， 加入-r可以递归搜索 加入-l可以只打印匹配的文件名 加入参数-e可以支持正则表达式 加入参数-i可以不区分大小写 加入参数-c可以指定匹配的行数 加入-v可以查出不匹配指定字符串的行数 替换上述匹配命令中的匹配字符串 1sed -i &quot;s/mysqli_connect/mysql_connect/g&quot; `grep mysqli_connect -rl ./` 其中，-i表示替换立即生效","link":"/2021/08/08/string-in-file-search/"},{"title":"学习资源汇总","text":"分布式搜索引擎elasticsearch学习教程——https://www.tutorialspoint.com/elasticsearch/elasticsearch_populate.htm java权限认证框架shiro——https://shiro.apache.org/authentication.html vue+bootstrap4学习——https://www.remotestack.io/build-vue-login-signup-ui-auth-template-with-bootstrap/ druid学习资源——https://druid.apache.org/docs/latest/configuration/index.html java日志框架logback——https://dennis-xlc.gitbooks.io/the-logback-manual/content/en/chapter-4-appenders/logback-core/rollingfileappender/size-and-time-based-rolling-policy.html springboot官方文档——https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#legal java缩写解释：https://www.allacronyms.com/EIS/Enterprise_Information_Server hexo使用文档：https://hexo.io/docs/writing.html","link":"/2021/08/20/study-resource-collection/"},{"title":"在windows 10中访问wsl（linux子系统）的方式（反过来又如何）","text":"在windows文件管理器中访问wsl（windows subsystem for linux）文件系统 进入安装好的wsl终端，输入如下命令： 1$ explorer.exe . 其中，explorer.exe为文件管理器的可执行文件，.代表当前目录（家目录）。在wsl中访问windows的本地文件 默认情况下，windows的各个分区以盘符作为挂载点，在wsl中可以通过目录/mnt/c进行访问，其中c代表C盘，其他分区依次类推。 1$ cd /mnt/c 在linux哲学中，一切皆是文件。","link":"/2021/04/01/the-way-of-accessing-wsl-file-system-in-windows/"},{"title":"迪迦奥特曼带给我的思考","text":"第49集——奥特之星剧情演说在这一集中，大古追踪穿越时空回到过去寻找怪兽的外星人查利加，和他一同回到了圆古英二导演还在世时的1965年。随后，大古在不经意间误闯进了圆古英二导演的摄影棚，临时充当了本该由长野（博）担任的场务一职，令人没想到的是，看到一身胜利队队服的大古，愣是没有一个人发现大古其实并不是长野（博），当然，在现实中，大古的扮演者就叫做长野博，这也是导演刻意给我们开的一个玩笑，不算剧情bug。 离开摄影棚之后，大古找到了查利加，并质问他的真正意图，但查利加并不想告诉大古，反而向他发起了攻击，愤怒的大古拿出武器击退了查利加，而查利加也随之消失不见了。 接下来的剧情中，还出现了真正的长野和大古见面的场景，不得不说，这种虚实相间的拍摄手法的确能够触动观众的情绪，带给观众一种说不出的感动。 镜头给到初代奥特曼剧本创作人的金城哲夫，此时的他还在苦苦构思如何写出一个另圆古一导演（圆古英二导演的儿子）满意的剧本，但反复改了8次还是不能让导演满意，最后一次勉强让导演满意了，可是随后的一句“这故事有趣吗”再次让金城陷入了重写剧本的境遇。正当金城绞尽脑汁想剧本的时候，圆古英二导演主动和他聊起了剧本创作遇到的困难，并将自己的一颗红宝石拿给金城看，还告诉他这是外星人送给他的，而自己和这个外星人是好朋友。原来圆古英二导演曾经遇到过一个来自M78星云的奥特曼，而当时这个奥特曼正将一只怪兽沉到湖底，后来，为了表示对地球人的友好，他将一颗奥特之星送给了圆古英二导演，并告诉他这颗奥特之星会对他产生帮助。然而他们之间的对话被躲在门外的查利加偷听到了，而圆古英二提到的被奥特曼沉到湖底的怪兽正是他所要寻找的亚那加基。 得到消息的查利加立刻赶到龙森湖救出被封印的亚那加基，并命令怪兽破坏人类的住所。怪兽的出现引起了大古的注意，为了阻止怪兽继续破坏地球，大古拿起神光棒，变身成了迪迦奥特曼，和怪兽展开了搏斗，谁知怪兽丝毫不落下风，反而挟持住了迪迦，并吸取他的能量，眼看迪迦就要被打败，一旁观战的圆古英二导演凭借自己的意念竟然也变成了一道光，朝着怪兽发动攻击，击退了正在吸取迪迦能量的怪兽之后，这道光居然变成了奥特曼，并将迪迦被吸取的能量重新输入到了他的体内。得到能量后的迪迦再次回到战斗，和另一个奥特曼同时发动光线技能，一举打败了怪兽。而操纵怪兽的查利加则放出一句“后会有期”之后就逃跑了。圆古英二看着两位巨人，说道“我们需要一个英雄，金城，英雄是必要的“。而此时的金城正在埋头书写关于英雄的故事。 最后一幕是圆古英二导演拿着金城写出来的奥特英雄的剧本开始了初代奥特曼剧集的拍摄。之后的事情我们也都知道了。从此，奥特曼宇宙开启了崭新的一页。 观后感作为一部平成年代的开山之作，《迪迦奥特曼》与圆谷制作的上一部奥特曼剧集中间已经整整间隔了16年，而16年前观看奥特曼的小孩子很多都已经长大成人，主打孩童向的奥特曼似乎已经和他们渐行渐远。或许正是基于这一考量，《迪迦奥特曼》从一开始面向的就是成人观众。还记得小时候看迪迦，更多的是关注奥特曼打小怪兽，至于为什么要打怪兽以及人类未来的命运则完全不加考虑，只知道这个奥特曼长得特别好看，还能变身成其他两种形态，真的太酷了。当我们长大后再次打开《迪迦奥特曼》，我们突然发现这个奥特曼似乎有点不一样，曾经我们心中无敌的奥特曼似乎也在慢慢变得不那么无敌，原来，奥特曼也是人变的，他也会受伤，甚至奥特曼还需要我们人类的帮助才能打败那些怪兽，不仅是奥特曼，那些被他打的怪兽也变了，似乎没有天生就是怪兽的，都是因为人类肆意破坏地球，盲目发展高科技，才使我们的身边多了这么多怪兽，而来自外太空的外星人之所以要侵略地球，毁灭人类，只是因为他们想活下去，而奥特曼既是光，同时也是人类，为了人类的生存，奥特曼必须站出来打倒怪兽。即使面对一个根本赢不了的敌人，奥特曼也要以人类的身份战斗到最后一刻。很难想象一向主打孩童向的特摄片居然能在短短的一集20多分钟的剧情中注入如此崇高的立意，也让长大后的我们知道原来《迪迦奥特曼》根本就不是一部面向孩童的特摄片。我们都误会他了。作为连接昭和和平成奥特曼的桥梁，迪迦在奥特之星中完成了这一神圣的交接仪式，当我们看到初代奥特曼和迪迦在圆谷英二导演面前握手时，我们知道，随着圆谷英二导演的去世以及平成时代的到来，未来的奥特曼系列将开启新的篇章，而这一切都将从迪迦奥特曼开始。——谨以此文献给我们的童年，永远的迪迦奥特曼。","link":"/2021/09/28/ultraman-classic/"},{"title":"在docker中使用mysql","text":"什么是容器容器是一种标准化的软件单元，它允许开发者将他们的应用的执行环境和机器环境隔离开来，可以解决类似”它在我机器上工作的好好的“的抱怨。而Docker是目前容器领域的实际标准。 Docker的另外一个重要的用途是开发者可以下载并运行任何容器化的应用，而不用在他们的本地安装。因此很多应用都实现了容器化版本。","link":"/2021/01/12/use-mysql-inside-docker/"},{"title":"我们为什么喜欢迪迦奥特曼——迪迦被禁播后的感想","text":"谁能想到，2021年的9月24日，这个看似格外普通的日子，却也是陪伴我们童年一路走来的特摄剧《迪迦奥特曼》上映25周年，居然在一片举报声中无声无息的全网下架，对于奥迷来说，这是一个值得被记住的日子，而对于期盼国产动漫能早日赶超国际水平的国人而言，这次的禁令不能不让我们心寒，或许我们希望的那一天永远都不会到来了。 迪迦带给我们的感动我们总说迪迦代表的是光，其实我们喜欢迪迦的真正原因是我们信仰迪迦带给我们的希望和与黑暗势力抗争到底的决心和勇气。 在迪迦奥特曼中，人类不停的被外来生物入侵，作为承担保护地球责任的地球防卫队——GUTS组织，在正面对抗体型庞大的怪兽和拥有高科技的外星人时根本也是无能为力，如果没有迪迦奥特曼的帮助，人类早就被毁灭几十次了，即使在面对没有丝毫破坏力的奇杰拉时，人类的表现也是令人失望的，因为人类宁愿活在虚无缥缈的幻境中，去逃避现实中的种种不堪，也不愿为了人类的未来去努力拼搏，积极进取，人类到底是一种软弱的生物。即便是迪迦之前的超古代奥特战士在看到这样的人类之后也只能任其毁灭，因为他们不是人类，对于浩瀚的宇宙而言，人类也只是其中渺小的一份子，如同大部分宇宙生物一样，自生自灭就是最好的生存法则。但是，这一切在迪迦出现后就完全变了，作为人类的大古机缘巧合之下获得了迪迦留在地球的巨人身躯，从一个普通的人类变成了保护地球的奥特战士，一次次以人类的身份比肩神明，为了人类的生存义无反顾的同凶残的巨型怪兽和邪恶的外星生物进行战斗，甚至在人类对奥特曼失去信任，反而帮助外星人诋毁奥特曼时也坚持维护人类免受灭顶之灾，如果这样的迪迦奥特曼都不能称之为英雄，并受到人类的尊敬和爱戴，那这人间或许本就该成为奇杰拉的墓场，这样的文明即使毁灭也无妨。迪迦奥特曼不仅带给我们希望，还教会了我们很多的道理，其中不乏对于人与人，人与科技，人与环境，人与地球，人与宇宙的深度思考，而这些看似宏大的人生理念，却在迪迦奥特曼中得到了很好的诠释。如果对于这样的一部作品都要冠以暴力的称谓而加以禁播，可想而知我们的社会中还有多少看似人模狗样，实则满肚子鸡鸣狗盗，阳奉阴违之人。这样的人无论是作为个人还是父母，对于人类的进步和社会的稳定都是一大阻碍，因为在他们眼中任何表达美好事物的东西都会被他们过滤在外，而最终留给他们的只能是暴力，于人于己，这样的人都是社会的毒瘤，而为他们提供滋生土壤的人也难辞其咎。此时此刻，迪迦或许只是暂时的离开，但他的精神会永远留在我们心中。迪迦奥特曼保护人类，更是为了保护我们人类赖以生存的美丽地球。","link":"/2021/09/26/why-we-like-ultraman-tiga/"},{"title":"win10企业版激活方法","text":"本文主要介绍如何通过kms服务器实现Windows 10专业版和企业版激活。 安装完系统之后，按住Win+X键，选择Windows PowerShell（管理员）,在弹出的窗口中输入下列命令： 12345678# win10专业版用户slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GXslmgr /skms kms.03k.orgslmgr /ato# win10企业版用户slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43slmgr /skms kms.03k.orgslmgr /ato 考虑到一般笔记本厂商会预装win10家庭版，所以，在使用上面的办法之前需要先升级到win10专业版。步骤如下： 打开设置页面，选择更新和安全，继续选择激活，点击更改产品密钥，输入： 1J7QT3-3GCPG-9GVWT-CH2XR-GMRJM 点击下一步 在提示页面点击更新即可。","link":"/2021/04/01/win10-activate/"},{"title":"为树莓派配置国内软件源","text":"因为众所周知的原因，树莓派的国外软件源在国内访问速度非常考验耐性，所以，为了能让树莓派愉快的更新到最新版本，有必要将默认的软件源替换成国内的同步镜像。下面就以清华大学的镜像站点为例子进行说明12$ sudo vim /etc/apt/sources.list# 将默认的软件源注释掉，新增如下的配置 12deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ bullseye main non-free contrib rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ bullseye main non-free contrib rpi 其中bullseye为当前树莓派系统的版本代号，可以参考默认的国外源的镜像配置中的代号，保持一致即可。 12$ sudo vim /etc/apt/sources.list.d/raspi.list# 将默认的软件源注释掉，并新增如下的配置 1deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main bullseye和默认配置的保持一直即可。","link":"/2021/11/18/add-china-software-source-for-raspberry-pi/"},{"title":"怎么在linux上清除命令的输出内容","text":"1$ ls -al &gt; /dev/null 2&gt;&amp;1 执行上面的命令之后你会发现终端没有任何输出，为什么会这样呢？ 继续执行下面的命令 1$ ls -qwer &gt; /dev/null 2&gt;&amp;1 发现还是没有任何输出，即使该命令是错误的。 造成这一切的根源在于命令最后面的2&gt;&amp;1。 我们知道/dev/null是linux系统上的伪设备文件，可以被用来消除来自程序的输出。尤其是对于命令行程序而言有更大的意义。 /dev/null看起来像是一个水漕，比如说一个可写的目标文件，然而只要有任何数据流被写入这个文件，都会被马上删除。 当用户不需要来自程序的输出信息时，这个命令是有用的。因为程序可能会生成大量的输出内容，而这会给分析日志的工作带来混乱。 对于/dev/null 2&gt;&amp;1命令，2在linux上代表STDERR（标准错误输出），而1则代表STDOUT（标准输出）。因此，这个命令的最终解释就是将标准错误输出和标准输出重定向到/dev/null，即消除这两种类型的输出。 我们再来具体分析下这个命令的构成，首先&gt;表示重定向，而被重定向的对象则是/dev/null。而不是打印到终端。 这是否意味着该命令所有的输出都会被重定向到/dev/null呢，并不是，因为它只会重定向标准输出。 因此，还需要加上2&gt;&amp;1。表示将2（标准错误输出）重定向到1（标准输出）。那么&amp;代表什么意思呢？如果不加上&amp;的话，标准错误输出将会输出到名字为1的文件中。而&amp;会告诉系统1不是一个文件，而是一个标准输出描述符号。 最后，我们将标准输出和标准错误输出都重定向到了/dev/null。而/dev/null会将所有的输出内容全部清除掉。 小结：/dev/null是linux系统上一个特殊的设备文件，可以将任何命令的标准输出（不管是标准输出还是错误输出）清除掉。","link":"/2021/11/15/how-to-discard-output-on-linux/"},{"title":"IT老齐的架构课程之缓存","text":"使用缓存的目的提升性能 缓存分类 客户端 主要对浏览器的静态资源进行缓存，通过在浏览器端设置Expires（过期时间点）或者Cache-Control（时间段）来告诉浏览器将资源缓存到客户端本地，从而减少多次请求同一个静态资源带来的带宽和响应时效上的损耗。 应用层 主要表现形式为CDN（Content Delivery Network），可以有效解决带宽集中占用以及数据分发的问题。 通过Nginx实现负载均衡，将静态资源存储在Nginx服务器上，并开启压缩功能； 服务层 进程内缓存：比如Mybatis的一二级缓存，或者Spring框架中的@EnableCache注解。 进程外缓存：典型的使用redis作为分布式缓存技术。 数据层 分布式缓存引入的问题数据一致性 如何保证数据一致性引入消息队列的主动推送功能，推送变更消息 什么情况下适用多级缓存架构 缓存数据稳定 可能产生高并发场景，应用启动时进行预热处理，访问前将热点数据先缓存，减少后端压力 一定程度上允许数据不一致不重要的信息更新处理方式：T+1，ETL日中处理。","link":"/2021/12/12/it-laoqi-architecture-cache/"},{"title":"微服务导论","text":"“微服务”——一个在当前种类繁多的软件架构中出现的新术语。虽然我们对这种事的自然反应一般都是轻蔑的瞥一眼，但真正能吸引我们的其实是术语中描述的一种软件系统风格。我们在过去的几年中看到了有一些项目使用了这种风格，迄今为止，他们的结果大部分都是正面的，因此，我们很多的同事也将它作为了一种构建企业级应用的默认风格。但是，并没有太多的的信息来告诉我们微服务风格究竟是什么，以及怎么去实现它。 简而言之，微服务架构风格是一种由多个微小服务集合组成的单应用开发风格，其中的每一个微小服务都拥有自己的进程以及轻量级的交互机制，通常是一个基于HTTP的API。这些服务围绕业务能力单独构建，并且可以被全自动化部署机制实现各自独立部署。对于这些服务也有一个纯粹的最小集中化管理，通常他们可以用不同的编程语言以及不同的数据存储技术来实现。","link":"/2021/11/23/microservices-theory-guide/"},{"title":"spring-cloud服务注册与发现组件——Eureka","text":"Spring Cloud之服务发现——Eureka(发音为[juә’ri:kә]) 服务注册与发现以及反馈的实现流程： Provider将自己的节点信息发送到指定的服务注册机上； 服务注册机将Provider发送过来的信息保存在指定区域，等待Consumer查询； Provider通过定期向服务注册机发送消息确保自己不会被注销，而当服务注册机长时间未收到某个Provider发送过来的信息时，会自动将该Provider注销。 当Provider网络地址发生变更时，会自动重新注册节点信息到服务注册机，避免了人工修改配置的问题。 Eureka的实现机制: Eureka分为Server端和Client端，Server端提供服务发现的能力，当微服务节点启动时，会自动向Server端注册自己的节点信息，而Server端则负责存储这些节点信息，供服务调用者查询； Client端一般和微服务集成，为微服务提供注册服务到Server端的能力，并从Server端获取最新的已注册服务列表的信息缓存到微服务端； 微服务启动后，会周期性（默认30s）向Server端发送心跳以防止被注销； 同时，Server端也会周期性（默认90s）的检查已注册的各个微服务是否仍然存活，如果超时，则注销该微服务的注册信息； Eureka的基础实现 Server端实现 首先创建一个基础的SpringBoot工程，假设是Maven工程，在POM文件中引入如下依赖： 123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 在启动类中加入注解@EnableEurekaService，声明这是一个Server实例。 在application.yml中加入如下内容： 12345678server: port: 8761eureka: client: registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http://localhost:8761/eureka/ Client端实现 首先创建一个基础的SpringBoot工程，假设是Maven工程，在POM文件中引入如下依赖： 123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 在application.yml中加入如下内容： 123456789spring: application: name: microsoftservice-provider-usereureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/instance: prefer-ip-address: true 高可用Eureka实现单节点的Eureka无法满足线上环境高可用的要求。一旦发生故障，轻则影响服务的可达性，重则引发服务瘫痪，因此，以集群的方式部署Eureka是非常必要的。 Eureka主页访问认证实现非JVM的微服务注册与发现Eureka的自我保护模式实现","link":"/2021/11/29/spring-cloud-component-eureka/"},{"title":"postgresql学习资源","text":"1. postgresql在arch linux上的安装和初始化https://www.cnblogs.com/lemos/p/11605557.html 2. postgresql语法https://www.runoob.com/postgresql/postgresql-syntax.html 3. postgresql官方文档https://www.postgresql.org/docs/current/sql-createfunction.html","link":"/2021/12/22/postgresql-study-resource/"},{"title":"什么是jwt","text":"什么是JWTJWT（Json Web Token）以JSON的格式传输网络安全认证消息，以一种轻量级的消息传输格式来确保服务端的安全。而被传输的JSON信息可以被认证和信任，因为它拥有可信的数字签名。 客户端只需要使用凭证在服务器端认证一次，认证成功之后，服务端会给客户端返回一个JWT，客户端未来的请求都可以使用这个JWT来通过服务端的认证,并且不需要再次发送认证信息，比如说用户名和密码。 需要注意的是，JWT中的payload对每个人都是可见的，因此我们不应该放任何敏感信息比如说密码在其中。我们可以加密payload数据，这样可以让它更加安全。然而我们可以确保没有人可以篡改payload中的信息。","link":"/2021/12/18/what-is-jwt-in-java/"},{"title":"postgresql常用查询场景","text":"1. 计算数组类型的元素之和首先创建包含数组类型字段的表 1234CREATE TABLE sal_emp ( name text, pay_by_quarter integer[4]); 其中pay_by_quarter表示每个季度的工资数组，数组长度为4。 需求：求指定季度区间内的工资总和。 插入测试数据 1234INSERT INTO sal_emp VALUES ('Bill', '{10000, 10000, 10000, 10000}' ) 由于postgresql本身支持按照索引取值，还支持按照索引范围取值，所以，很自然想到使用区间值来实现求和的首尾季度，但如何求和呢？ 1select pay_by_quarter[1:4] from sal_emp; 查询结果如下： 123pay_by_quarter |-------------------------+[10000,10000,10000,10000]| 如何将这4个数字累加起来呢，你可能想到使用sum函数来求和，但很遗憾，sum并不支持数组类型的求和。那么，我们可不可以将数组内的数字拆分成4条数据呢，当然可以。使用unnest函数可以帮我们做到这一点。 所以最后的sql变成了这样 1234567select sum(t.arr) from ( select unnest(pay_by_quarter[1:4]) arr from sal_emp ) t 执行结果如下： 123sum |-----+40000| 正是我们想要的求和之后的结果。","link":"/2021/12/23/postgresql-in-common-use-form/"},{"title":"C++学习资源","text":"教程https://www.softwaretestinghelp.com/cpp-tutorials/","link":"/2021/12/31/c-plus-plus-study-resource/"},{"title":"如何在centos上管理软件包","text":"1. 使用YUM进行软件的管理查看软件包的信息1yum info 包名 查看软件包的依赖列表1yum deplist 包名 卸载软件包1yum remove 包名 查看已安装的软件包1yum list installed 查看仓库内可用的软件包1yum list available 清除所有的包缓存1yum clear all 2. 使用RPM进行软件管理查看已经安装的软件包1rpm -qa 查看某个已经被安装的软件包的信息1rpm -qi 包名 查看某个包的安装文件列表1rpm -ql 包名 查看某个rpm包的详细信息1rpm -qip 包名.rpm 查看某个rpm包中将要被安装的文件列表1rpm -qlp 包名.rpm 查看某个目录或者文件对应的包1rpm -qf 文件或者目录 查看某个已经安装的包的依赖1rpm -qR 包名 查看某个没有被安装的包的依赖项1rpm -qRp 包名.rpm 验证某个包的文件是否被正确安装1rpm -V 包名","link":"/2022/01/12/centos-software-management/"},{"title":"java中常用的文件操作工具","text":"使用的类库apache的公共工具包 12## build.gradleimplementation 'commons-io:commons-io:2.11.0' 文件和目录操作类 FileUtils [private] addCopyAttributes:如果原copy option中不存在复制选项，则在赋值选项中追加一个StandardCopyOption.COPY_ATTRIBUTES","link":"/2022/01/10/common-file-util-of-java/"},{"title":"makefile在C++中的使用","text":"Make工具Make是unix上被用来简化为一个工程中的各个不同模块构建可执行程序的工具。在Makefile中有各种各样的规则来指定目标入口。make工具则读取所有的这些规则并依照行事。 例如，如果一个规则指定了某个依赖，那么make工具将在编译时包含这个依赖。make命令利用makefile来完成模块构建和文件清理的工作。 make的常用语法如下： 1make target_label # target_label是在makefile中指定的目标 例如，如果我们想要执行清理文件的操作，那么我们可以这么做： 1make clean # 注意，clean实际上是指定了rm作为执行命令 C++ MakefileMakefile是一个由make命令来使用并用来构建目标的纯文本文件。一个Makefile也包含了一些源码级别的依赖信息以及构建顺序。 现在让我们看看Makefile的通用结构： 一个典型的Makefile通常以一个变量声明开头，后面紧跟着一串用来构建指定目标的目标入口。这些目标可能是.o或者是其他的可执行文件，比如说C或者C++或者java的.class文件。 我们还可以有一串被目标标识（target label)所指定并被用来执行一系列命令的目标入口。 因此一个通用的makefile大致如下： 1234# commenttarget: dependency1 dependency2 ... dependencyn command# 注意，command前面的tab缩进对于make来说是必要的 1234567891011121314# 指定编译器，g++代表C++编译器，gcc代表C编译器CC = g++# 编译器flags# -g表示需要添加debug信息到可执行文件中# -Wall表示打开大多数编译器警告CFLAGS = -g -Wall# TARGET = mainall: $(TARGET)$(TARGET): $(TARGET).cpp $(CC) $(CFLAGS) -o $(TARGET) $(TARGET).cppclean: $(RM) $(TARGET) Make和Makefile的例子假设我们的工程有如下几个文件： Main.cpp：主程序 Point.h：point类的头文件 Point.cpp：Point类的实现类 Square.h：square的头文件 Square.cpp：square类的实现类 对于上面的几个文件，我们需要将这些文件各自编译并生成.o文件，然后将它们link成一个叫做main的可执行文件。 接下来我们将各自编译这些文件： g++ -c main.cpp：生成main.o g++ -c point.cpp：生成point.o g++ -c square.cpp：生成square.o 接下来，我们需要将这些.o文件link成一个可执行文件： 1g++ -o main main.o point.o square.o 接下来，我们需要确定当某个文件发生变更时需要重新编译和重新生成的其他关联文件。下图描述了这种依赖关系。 在上面的依赖图中，我们可以看到main位于根部，而main又包含了对象文件main.o、point.o、square.o，它们分别由各自的cpp文件编译生成。 所有的cpp实现都使用了它们自己的头文件，而main.cpp又引用了point.h和square.h。 接下来point.cpp引用了point.h。square.cpp引用了square.h和point.h。 如果我们的工程中只有少数几个文件，那么我们可以不用关系它们之间的依赖关系，但是，实际项目中，我们可能会有成百上千个文件，如果我们每次修改完一个文件之后都要手动编译和生成所有文件，那无疑是令人崩溃的。因此，我们需要使用make工具来帮我们简化这个流程。 注意，必须使用Makefile作为文件名，不区分大小写，且放在源代码的根目录。 12345CC = g++CFLAGS = -wall -g# 确定依赖关系main: main.o Point.o Square.o $(CC) $(CFLAGS) -o main main.o Point.o Square.o 上面的命令实际上等价于我们在终端中执行 g++ -wall -g -o main main.o point.o square.o 接下来我们需要生成对象文件：main.o、point.o、square.o 1234main.o: main.cpp point.h square.h $(CC) $(CFLAGS) -c main.cppPoint.o: Point.hSquare.o: Square.h Point.h Makefile的优点 对于大项目，可以让我们以系统性和更有效的方式呈现项目； 可以让源代码更加有效和易读，并利于debug； Makefile可以自动编译那些被修改过的文件，因此当发生文件变更时我们不需要手动重新生成整个项目。 Makefile允许我们一次编译多个文件，因此我们只需要一个步骤就可以完成整个项目的编译。","link":"/2021/12/30/how-makefile-is-working-in-c-plus-plus/"},{"title":"java和c++的区别","text":"java和c++的不同点 BASIS FOR COMPARISON C++ Java Memory Management Managed by developers using pointers. Supports structures and union Controlled by the system, does not use pointers. Supports Threads and Interfaces Inheritance Provide single and multiple inheritances both Does not support multiple inheritances. Uses the concept of Interface to achieve Runtime error detection mechanism Programmer’s responsibility System’s responsibility Libraries Comparatively available with low-level functionalities Provide a wide range of classes for various high-level services Program Handling Methods and data can reside outside classes. The concept of a global file, namespace scopes available All methods and data reside in the class itself. Concept od Package is used. Type Semantics Supports consistent support between primitive and object types Different from primitive and object types Portability Platform dependent as source code must be recompiled for different platform. It uses the concept of bytecode which is platform-independent and can be used with platform-specific JVM. Polymorphism Explicit for methods supports mixed hierarchies Automatic uses static and dynamic binding 参考文章：https://www.educba.com/c-plus-plus-vs-java/","link":"/2022/01/03/java-cpp-difference/"},{"title":"C++中指针和引用的使用","text":"指针和引用的区别指针是一个持有某个变量内存地址的特殊变量，使用*号表示。 引用类似于指针，一般可以认为是持有某个值的变量的别名，它被用来关联被赋值给它的变量，使用&amp;表示。 引用存储的是变量的地址。 语法层面的区别如下： 指针 引用 是否可以为null 可以指向一个null 不能为null，否则会报异常 声明方式 使用*号声明 使用&amp;声明 是否可以级联 可以级联声明int *ptr;int **ptr1;int x = 10;int y = 20;ptr = &x;ptr1 = &ptr; 是否可以重新赋值 可以 一旦变量被赋值给引用变量，那么这个引用变量将不能重新被赋值 是否可以做算术运算 可以 不可以 S.No. Pointer Reference 1. Pointers in C++ can be assigned to NULL values. References in C++ can never be NULL else; it will throw an exception. 2. To dereference a variable in the case of pointers, (*) operator is used There is no need for referencing the variable; the variable name is simply used in case of reference in C++. 3. Pointers allow multiple levels of indirection, which means that pointer to pointer to pointer assigning and targeting is possible. For example: int *ptr, int **ptr1; int x= 10; int y= 20; ptr = &x; ptr1 = &ptr; No multiple levels of indirection are possible in the case of references. Only a single level is applicable in references. Implementing multiple levels in references in C++ throws a compiler error to the user. For example, int a = 13; int &amp;ref = a; int &amp;&amp;ref1 = ref; 4. A pointer can be reassigned to point to another variable. But the variable needs to be of the same type of variable. For example: int *p; Int x, y; p = &x; p = &y; Once the variable is referred to by the reference variable, it cannot be reassigned to refer to another variable. 5. All the arithmetic operations like addition, subtraction, increment, etc., are possible in the case of pointers in C++. This is known as Pointer arithmetic. For example: int arr [5] = {10, 20, 30, 40, 50}; int p = arr; for (int i =0; i&lt;5; i++) { cout &lt;&lt; *p &lt;&lt; endl; p++; } Arithmetic operations are not possible in the case of references. In C++, it will throw a compiler time error when it tries to do so. For example: int x = 10; int &amp;ref = x; cout &lt;&lt; ref++ &lt;&lt; endl; 6. In the case of declaring a pointer in a C++ program, (*) operator is used before the pointer name. For example: int *ptr; In the case of reference, the reference variable is declared by using the (&amp;) operator before the reference variable, which stands for the address. For example: Int a= 10; int &amp;ref = a; 7. The pointer variable returns the value whose address it is pointing to. Value can be retrieved using the (*) operator. The reference variable returns the address of the address it is referring to. The address can be retrieved using the (&amp;) operator. 8. The pointer variable in C++ has its own address in computer memory, and it also occupies space in the stack. The reference variable does not have its own memory address; instead, it only points to the variable and shares the same address as the original variable.","link":"/2022/01/03/pointer-and-reference-in-cpp/"},{"title":"design-pattern-with-java","text":"","link":"/2022/01/13/design-pattern-with-java/"},{"title":"vimrc配置教程","text":"基础配置 set nocompatible：设置为不兼容vi filetype on：自动检测文件类型 filetype plugin on：自动加载插件 filetype indent on：自动缩进 syntax on：语法高亮 set nu：开启行号 set cursorline：高亮光标所在的当前行 set cursorcolumn：高亮光标所在的当前列 set shiftwidth=4：设置shift的宽度为4个空格 set tabstop=4：设置tab的宽度为4列 set expandtab：使用空格代替tab的缩进 set nobackup：不保存备份文件 开箱即用的vimrc配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; &quot; &quot; ██╗ ██╗██╗███╗ ███╗██████╗ ██████╗&quot; ██║ ██║██║████╗ ████║██╔══██╗██╔════╝&quot; ██║ ██║██║██╔████╔██║██████╔╝██║ &quot; ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║ &quot; ╚████╔╝ ██║██║ ╚═╝ ██║██║ ██║╚██████╗&quot; ╚═══╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝&quot; &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; &quot; Disable compatibility with vi which can cause unexpected issues.set nocompatible&quot; Enable type file detection. Vim will be able to try to detect the type of file is use.filetype on&quot; Enable plugins and load plugin for the detected file type.filetype plugin on&quot; Load an indent file for the detected file type.filetype indent on&quot; Turn syntax highlighting on.syntax on&quot; Add numbers to the file.set number&quot; Highlight cursor line underneath the cursor horizontally.set cursorline&quot; Highlight cursor line underneath the cursor vertically.set cursorcolumn&quot; Set shift width to 4 spaces.set shiftwidth=4&quot; Set tab width to 4 columns.set tabstop=4&quot; Use space characters instead of tabs.set expandtab&quot; Do not save backup files.set nobackup&quot; Do not let cursor scroll below or above N number of lines when scrolling.set scrolloff=10&quot; Do not wrap lines. Allow long lines to extend as far as the line goes.set nowrap&quot; While searching though a file incrementally highlight matching characters as you type.set incsearch&quot; Ignore capital letters during search.set ignorecase&quot; Override the ignorecase option if searching for capital letters.&quot; This will allow you to search specifically for capital letters.set smartcase&quot; Show partial command you type in the last line of the screen.set showcmd&quot; Show the mode you are on the last line.set showmode&quot; Show matching words during a search.set showmatch&quot; Use highlighting when doing a search.set hlsearch&quot; Set the commands to save in history default number is 20.set history=1000&quot; Enable auto completion menu after pressing TAB.set wildmenu&quot; Make wildmenu behave like similar to Bash completion.set wildmode=list:longest&quot; There are certain files that we would never want to edit with Vim.&quot; Wildmenu will ignore files with these extensions.set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx&quot; PLUGINS ---------------------------------------------------------------- {{{call plug#begin('~/.vim/plugged') Plug 'dense-analysis/ale' Plug 'preservim/nerdtree'call plug#end()&quot; }}}&quot; MAPPINGS --------------------------------------------------------------- {{{&quot; Set the backslash as the leader key.let mapleader = &quot;\\&quot;&quot; Press \\\\ to jump back to the last cursor position.nnoremap &lt;leader&gt;\\ ``&quot; Press \\p to print the current file to the default printer from a Linux operating system.&quot; View available printers: lpstat -v&quot; Set default printer: lpoptions -d &lt;printer_name&gt;&quot; &lt;silent&gt; means do not display output.nnoremap &lt;silent&gt; &lt;leader&gt;p :%w !lp&lt;CR&gt;&quot; Type jj to exit insert mode quickly.inoremap jj &lt;Esc&gt;&quot; Press the space bar to type the : character in command mode.nnoremap &lt;space&gt; :&quot; Pressing the letter o will open a new line below the current one.&quot; Exit insert mode after creating a new line above or below the current line.nnoremap o o&lt;esc&gt;nnoremap O O&lt;esc&gt;&quot; Center the cursor vertically when moving to the next word during a search.nnoremap n nzznnoremap N Nzz&quot; Yank from cursor to the end of line.nnoremap Y y$&quot; Map the F5 key to run a Python script inside Vim.&quot; We map F5 to a chain of commands here.&quot; :w saves the file.&quot; &lt;CR&gt; (carriage return) is like pressing the enter key.&quot; !clear runs the external clear screen command.&quot; !python3 % executes the current file with Python.nnoremap &lt;f5&gt; :w &lt;CR&gt;:!clear &lt;CR&gt;:!python3 % &lt;CR&gt;&quot; You can split the window in Vim by typing :split or :vsplit.&quot; Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.nnoremap &lt;c-j&gt; &lt;c-w&gt;jnnoremap &lt;c-k&gt; &lt;c-w&gt;knnoremap &lt;c-h&gt; &lt;c-w&gt;hnnoremap &lt;c-l&gt; &lt;c-w&gt;l&quot; Resize split windows using arrow keys by pressing:&quot; CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.noremap &lt;c-up&gt; &lt;c-w&gt;+noremap &lt;c-down&gt; &lt;c-w&gt;-noremap &lt;c-left&gt; &lt;c-w&gt;&gt;noremap &lt;c-right&gt; &lt;c-w&gt;&lt;&quot; NERDTree specific mappings.&quot; Map the F3 key to toggle NERDTree open and close.nnoremap &lt;F3&gt; :NERDTreeToggle&lt;cr&gt;&quot; Have nerdtree ignore certain files and directories.let NERDTreeIgnore=['\\.git$', '\\.jpg$', '\\.mp4$', '\\.ogg$', '\\.iso$', '\\.pdf$', '\\.pyc$', '\\.odt$', '\\.png$', '\\.gif$', '\\.db$']&quot; }}}&quot; VIMSCRIPT -------------------------------------------------------------- {{{&quot; Enable the marker method of folding.augroup filetype_vim autocmd! autocmd FileType vim setlocal foldmethod=markeraugroup END&quot; If the current file type is HTML, set indentation to 2 spaces.autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab&quot; If Vim version is equal to or greater than 7.3 enable undofile.&quot; This allows you to undo changes to a file even after saving it.if version &gt;= 703 set undodir=~/.vim/backup set undofile set undoreload=10000endif&quot; You can split a window into sections by typing `:split` or `:vsplit`.&quot; Display cursorline and cursorcolumn ONLY in active window.augroup cursor_off autocmd! autocmd WinLeave * set nocursorline nocursorcolumn autocmd WinEnter * set cursorline cursorcolumnaugroup END&quot; If GUI version of Vim is running set these options.if has('gui_running') &quot; Set the background tone. set background=dark &quot; Set the color scheme. colorscheme molokai &quot; Set a custom font you have installed on your computer. &quot; Syntax: &lt;font_name&gt;\\ &lt;weight&gt;\\ &lt;size&gt; set guifont=Monospace\\ Regular\\ 12 &quot; Display more of the file by default. &quot; Hide the toolbar. set guioptions-=T &quot; Hide the the left-side scroll bar. set guioptions-=L &quot; Hide the the left-side scroll bar. set guioptions-=r &quot; Hide the the menu bar. set guioptions-=m &quot; Hide the the bottom scroll bar. set guioptions-=b &quot; Map the F4 key to toggle the menu, toolbar, and scroll bar. &quot; &lt;Bar&gt; is the pipe character. &quot; &lt;CR&gt; is the enter key. nnoremap &lt;F4&gt; :if &amp;guioptions=~#'mTr'&lt;Bar&gt; \\set guioptions-=mTr&lt;Bar&gt; \\else&lt;Bar&gt; \\set guioptions+=mTr&lt;Bar&gt; \\endif&lt;CR&gt;endif&quot; }}}&quot; STATUS LINE ------------------------------------------------------------ {{{&quot; 状态条当vimrc重新加载的时候set statusline=&quot; 左侧的状态条set statusline+=\\ %F\\ %M\\ %Y\\ %R&quot; 在左右边的中间部分添加分割条set statusline+=%=&quot; 右侧的状态条&quot;set statusline+=\\ ascii:\\ %b\\ hex:\\ 0x%B\\ row:\\ %l\\ col:\\ %c\\ percent:\\ %p%%&quot; 在倒数第二行展示状态条set laststatus=2&quot; }}} 参考资料：https://www.freecodecamp.org/news/vimrc-configuration-guide-customize-your-vim-editor/ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&quot; 设置一个tab等于4个空格set shiftwidth=4set tabstop=4&quot; 智能使用tab键set smarttab&quot; 使用空格代替tabset expandtab&quot; 打开行号set nu&quot; 开启自动缩进set ai&quot; 开启智能缩进set si&quot; 开启自动换行set wrap&quot; 开启语法高亮syntax enable&quot; 高亮查询结果set hlsearch&quot; 查询时，智能判定大小写&quot; set smartcase(会覆盖ignorecase)&quot; 查询时，忽略大小写set ignorecase&quot; 显示文件名set laststatus=2if &amp;compatible &quot; 如果处于兼容模式，则设为非兼容模式，否则保持默认设置 set nocompatibleendif&quot; 设置jj为esc的快捷键inoremap jj &lt;esc&gt;&quot; 按需添加插件管理器function! PackInit() abort packadd minpac call minpac#init() call minpac#add('tpope/vim-scriptease',{'type':'opt'}) call minpac#add('k-takata/minpac',{'type':'opt'}) call minpac#add('plasticboy/vim-markdown')endfunction&quot; 快捷键，实时更新插件、实时删除插件、实时查看插件状态command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()command! PackClean source $MYVIMRC | call PackInit() | call minpac#clean()command! PackStatus packadd minpac | call minpac#status()command! PackList packadd minpac | call minpac#status()nnoremap &lt;C-p&gt; :&lt;C-u&gt;FZF&lt;CR&gt;nnoremap &lt;C-s&gt; :&lt;C-u&gt;w&lt;CR&gt;","link":"/2022/01/16/vimrc-configure-tutorial/"},{"title":"shell使用教程","text":"参考资料 https://www.shellscript.sh/loops.html","link":"/2022/01/16/shell-basic-usage/"},{"title":"debian包管理器使用手册","text":"debian包的构成123456789101112131415161718192021222324252627282930313233343536373839# 列出deb包中的内容$ ar t dpkg_1.19.7_amd64.debdebian-binarycontrol.tar.gzdata.tar.xz# 解压缩deb安装包$ ar x dpkg_1.19.7_amd64.deb$ lscontrol.tar.gz data.tar.xz debian-binary dpkg_1.19.7_amd64.deb# 查看data.tar.xz包中的文件列表，并选择只展示前面的16行$ tar tJf data.tar.xz | head -n 16./././etc/./etc/alternatives/./etc/alternatives/README./etc/cron.daily/./etc/cron.daily/dpkg./etc/dpkg/./etc/dpkg/dpkg.cfg./etc/dpkg/dpkg.cfg.d/./etc/logrotate.d/./etc/logrotate.d/alternatives./etc/logrotate.d/dpkg./sbin/./sbin/start-stop-daemon./usr/./usr/bin/# 查看control.tar.xz包中的内容tar xJf control.tar.xz././conffiles./control./md5sums./postinst./postrm# 查看文件内容cat debian-binary2.0 由此可见，Debian的deb存档格式主要由三个文件组成： debian-binary 用来标识deb文件包的格式版本的文本文件，在Buster发行版中仍然是2.0。 control.tar.xz 这个档案里面包含了所有的元信息，比如说包名和版本，以及一些安装之前或者中途或者之后的执行脚本。其中的一些元信息甚至允许包管理器工具根据包中列举出的文件是否已经安装或者有些文件是否已经被本地修改来决定能否安装或者卸载该软件。 data.tar.xz,data.tar.bz2,data.tar.gz 这个档案中包含了所有将会从包中提取出来的文件，比如可执行文件，类库，文档等等。该档案可以使用不同的压缩格式，相应的，档案的名字也会根据压缩类型选择合适的后缀，比如xz，bzip2，gzip。软件包元信息 APT工具 查看系统所有已经安装好包和对应的版本1$ apt-show-versions https://www.debian.org/doc/manuals/debian-handbook/apt.zh-cn.html未完待续…","link":"/2022/01/18/debian-package-management-note/"},{"title":"new-to-maven-local-repo","text":"","link":"/2022/01/17/new-to-maven-local-repo/"},{"title":"debian10国内镜像","text":"国内使用debian 10的软件仓库地址1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# Debian 10 buster# 中科大源deb http://mirrors.ustc.edu.cn/debian buster main contrib non-freedeb http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-freedeb http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-freedeb http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian buster main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free# 官方源# deb http://deb.debian.org/debian buster main contrib non-free# deb http://deb.debian.org/debian buster-updates main contrib non-free# deb http://deb.debian.org/debian-security/ buster/updates main contrib non-free# deb-src http://deb.debian.org/debian buster main contrib non-free# deb-src http://deb.debian.org/debian buster-updates main contrib non-free# deb-src http://deb.debian.org/debian-security/ buster/updates main contrib non-free# 网易源# deb http://mirrors.163.com/debian/ buster main non-free contrib# deb http://mirrors.163.com/debian/ buster-updates main non-free contrib# deb http://mirrors.163.com/debian/ buster-backports main non-free contrib# deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib# deb-src http://mirrors.163.com/debian/ buster main non-free contrib# deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib# deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib# deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib# 阿里云# deb http://mirrors.aliyun.com/debian/ buster main non-free contrib# deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib# deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib# deb http://mirrors.aliyun.com/debian-security buster/updates main# deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib# deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib# deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib# deb-src http://mirrors.aliyun.com/debian-security buster/updates main","link":"/2022/01/19/debian-10-china-repo/"},{"title":"工具资源","text":"debian软件包下载仓库 https://debian.pkgs.org/ debian管理员手册 https://www.debian.org/doc/manuals/debian-handbook/ spring-session-redis集成文档 https://docs.spring.io/spring-session/reference/guides/boot-redis.html持续更新……","link":"/2022/01/19/tool-resources/"},{"title":"在idea中自定义注释模板","text":"intellij idea中设置自定义代码模板首先，在自定义代码模板中新增快捷方式*，并选择触发按键为Enter 代码注释模板定义如下： $description$:定义方法描述字段 $author$:定义方法作者 $date$:定义方法定义日期 $param$:定义方法参数，该参数需要使用自定义groovy脚本 $return$:定义方法返回值，该参数需要使用自定义groovy脚本 1234567* * * @description $description$ * @author $author$ * @date $date$ $time$$param$ $return$ */ 变量赋值： 1description = &quot;&quot; 1author = user() 1date = time() 1234return = groovyScript(&quot; def param=\\&quot;${_1}\\&quot;; if(param == \\'\\' || param == \\'void\\') return \\'\\'; return \\' \\\\n * @return \\' + param&quot;, methodReturnType()) 123456789param = groovyScript(&quot; def result=''; def params=\\&quot;${_1}\\&quot;.replaceAll(\\'[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\\', \\'\\').split(\\',\\').toList(); for(i = 0; i &lt; params.size(); i++) { if(params[i] == \\'\\') return \\' \\'; result+=\\' * @param \\' + params[i] + \\' \\' + params[i] + ((i &lt; params.size() - 1) ? \\' \\\\n\\' : \\' \\') }; return result&quot;, methodParameters()) 在java代码中敲入/**，按下Enter键即可看到自动生成的注释 123456789/** * * @description * @author pengkai * @date 2022/02/22 下午7:33 * @param username username * @param password password * @return org.springframework.security.core.userdetails.UserDetails */","link":"/2022/02/22/idea-use-notes/"},{"title":"","text":"title: docker常用编辑操作命令date: 2023-03-06 14:39:00tags: docker images categories: docker 1. （批量）删除镜像的命令1$ docker rmi xxx 当镜像被容器使用的时候删除会失败，因此，需要先将容器删除 比如我们想要批量将所有处于’Exited’状态的容器删掉，则可以使用如下命令： 1234# 1、停止容器$ docker stop $(docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }')# 2、删除容器$ docker rm $(docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }') 当我们想要将不再使用的镜像删掉的时候，或者仓库中有大量的REPOSITORY和TAG为none的镜像时，可以通过下面的命令将符合过滤条件的镜像批量删除： 12# 批量删除满足条件的镜像$ docker rmi $(docker images | grep &quot;none&quot; | awk '{print $3}')","link":"/2023/04/17/docker-common-use-commands/"},{"title":"maozedong_quotes","text":"原文地址：https://www.marxists.org/chinese/maozedong/marxist.org-chinese-mao-193708.htm 矛盾的特殊性 我们的教条主义者是懒汉，他们拒绝对于具体事物做任何艰苦的研究工作，他们把一般真理看成是凭空出现的东西，把它变成为人们所不能够捉摸的纯粹抽象的公式，完全否定了并且颠覆了这个人类认识真理的正常秩序。他们也不懂得人类认识的两个过程的互相联结——由特殊到一般，又由一般到特殊，他们完全不懂得马克思主义的认识论。","link":"/2023/07/03/maozedong-quotes/"}],"tags":[{"name":"archlinux","slug":"archlinux","link":"/tags/archlinux/"},{"name":"gradle","slug":"gradle","link":"/tags/gradle/"},{"name":"maven","slug":"maven","link":"/tags/maven/"},{"name":"aria2","slug":"aria2","link":"/tags/aria2/"},{"name":"神器","slug":"神器","link":"/tags/%E7%A5%9E%E5%99%A8/"},{"name":"个人感悟","slug":"个人感悟","link":"/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F/"},{"name":"bash","slug":"bash","link":"/tags/bash/"},{"name":"shortcut","slug":"shortcut","link":"/tags/shortcut/"},{"name":"编码","slug":"编码","link":"/tags/%E7%BC%96%E7%A0%81/"},{"name":"模式","slug":"模式","link":"/tags/%E6%A8%A1%E5%BC%8F/"},{"name":"netcat","slug":"netcat","link":"/tags/netcat/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"crontab","slug":"crontab","link":"/tags/crontab/"},{"name":"curl","slug":"curl","link":"/tags/curl/"},{"name":"design pattern","slug":"design-pattern","link":"/tags/design-pattern/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"elasticsearch","slug":"elasticsearch","link":"/tags/elasticsearch/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"分布式","slug":"分布式","link":"/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"搜索引擎","slug":"搜索引擎","link":"/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"问题修复","slug":"问题修复","link":"/tags/%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"},{"name":"中文乱码","slug":"中文乱码","link":"/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"},{"name":"springmvc","slug":"springmvc","link":"/tags/springmvc/"},{"name":"util","slug":"util","link":"/tags/util/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"gzip","slug":"gzip","link":"/tags/gzip/"},{"name":"硬件","slug":"硬件","link":"/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"raspberry pi","slug":"raspberry-pi","link":"/tags/raspberry-pi/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"默认文件管理器","slug":"默认文件管理器","link":"/tags/%E9%BB%98%E8%AE%A4%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"vps","slug":"vps","link":"/tags/vps/"},{"name":"面试","slug":"面试","link":"/tags/%E9%9D%A2%E8%AF%95/"},{"name":"概念","slug":"概念","link":"/tags/%E6%A6%82%E5%BF%B5/"},{"name":"jenkins","slug":"jenkins","link":"/tags/jenkins/"},{"name":"mybatis","slug":"mybatis","link":"/tags/mybatis/"},{"name":"nmap","slug":"nmap","link":"/tags/nmap/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"netty","slug":"netty","link":"/tags/netty/"},{"name":"server","slug":"server","link":"/tags/server/"},{"name":"pdo","slug":"pdo","link":"/tags/pdo/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"samba","slug":"samba","link":"/tags/samba/"},{"name":"permission","slug":"permission","link":"/tags/permission/"},{"name":"shiro","slug":"shiro","link":"/tags/shiro/"},{"name":"bean","slug":"bean","link":"/tags/bean/"},{"name":"post-processor","slug":"post-processor","link":"/tags/post-processor/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"exception","slug":"exception","link":"/tags/exception/"},{"name":"aware","slug":"aware","link":"/tags/aware/"},{"name":"annotation","slug":"annotation","link":"/tags/annotation/"},{"name":"javaweb","slug":"javaweb","link":"/tags/javaweb/"},{"name":"grep","slug":"grep","link":"/tags/grep/"},{"name":"sed","slug":"sed","link":"/tags/sed/"},{"name":"study","slug":"study","link":"/tags/study/"},{"name":"汇总","slug":"汇总","link":"/tags/%E6%B1%87%E6%80%BB/"},{"name":"wsl","slug":"wsl","link":"/tags/wsl/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"奥特曼","slug":"奥特曼","link":"/tags/%E5%A5%A5%E7%89%B9%E6%9B%BC/"},{"name":"迪迦","slug":"迪迦","link":"/tags/%E8%BF%AA%E8%BF%A6/"},{"name":"激活","slug":"激活","link":"/tags/%E6%BF%80%E6%B4%BB/"},{"name":"国内源","slug":"国内源","link":"/tags/%E5%9B%BD%E5%86%85%E6%BA%90/"},{"name":"输出","slug":"输出","link":"/tags/%E8%BE%93%E5%87%BA/"},{"name":"cache","slug":"cache","link":"/tags/cache/"},{"name":"缓存","slug":"缓存","link":"/tags/%E7%BC%93%E5%AD%98/"},{"name":"微服务","slug":"微服务","link":"/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"eureka","slug":"eureka","link":"/tags/eureka/"},{"name":"resource","slug":"resource","link":"/tags/resource/"},{"name":"authenticate","slug":"authenticate","link":"/tags/authenticate/"},{"name":"常用","slug":"常用","link":"/tags/%E5%B8%B8%E7%94%A8/"},{"name":"software","slug":"software","link":"/tags/software/"},{"name":"cpp","slug":"cpp","link":"/tags/cpp/"},{"name":"指针","slug":"指针","link":"/tags/%E6%8C%87%E9%92%88/"},{"name":"引用","slug":"引用","link":"/tags/%E5%BC%95%E7%94%A8/"},{"name":"vimrc","slug":"vimrc","link":"/tags/vimrc/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"apt","slug":"apt","link":"/tags/apt/"},{"name":"mirror","slug":"mirror","link":"/tags/mirror/"},{"name":"tool","slug":"tool","link":"/tags/tool/"},{"name":"comment","slug":"comment","link":"/tags/comment/"},{"name":"Contradiction theory","slug":"Contradiction-theory","link":"/tags/Contradiction-theory/"},{"name":"Materialism","slug":"Materialism","link":"/tags/Materialism/"}],"categories":[{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"人生","slug":"人生","link":"/categories/%E4%BA%BA%E7%94%9F/"},{"name":"代码大全","slug":"代码大全","link":"/categories/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/"},{"name":"linux命令","slug":"linux命令","link":"/categories/linux%E5%91%BD%E4%BB%A4/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"elasticsearch","slug":"elasticsearch","link":"/categories/elasticsearch/"},{"name":"spring原理","slug":"spring原理","link":"/categories/spring%E5%8E%9F%E7%90%86/"},{"name":"系统","slug":"系统","link":"/categories/%E7%B3%BB%E7%BB%9F/"},{"name":"hardware","slug":"hardware","link":"/categories/hardware/"},{"name":"raspberry pi","slug":"raspberry-pi","link":"/categories/raspberry-pi/"},{"name":"gnome","slug":"gnome","link":"/categories/gnome/"},{"name":"面试","slug":"面试","link":"/categories/%E9%9D%A2%E8%AF%95/"},{"name":"java学习笔记","slug":"java学习笔记","link":"/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"nmap","slug":"nmap","link":"/categories/nmap/"},{"name":"javaweb","slug":"javaweb","link":"/categories/javaweb/"},{"name":"php","slug":"php","link":"/categories/php/"},{"name":"文件共享服务","slug":"文件共享服务","link":"/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/"},{"name":"spring framework","slug":"spring-framework","link":"/categories/spring-framework/"},{"name":"spring框架","slug":"spring框架","link":"/categories/spring%E6%A1%86%E6%9E%B6/"},{"name":"生涯 SSH连接的建立方式","slug":"生涯-SSH连接的建立方式","link":"/categories/%E7%94%9F%E6%B6%AF-SSH%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E6%96%B9%E5%BC%8F/"},{"name":"字符串处理","slug":"字符串处理","link":"/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"},{"name":"自学","slug":"自学","link":"/categories/%E8%87%AA%E5%AD%A6/"},{"name":"notes","slug":"notes","link":"/categories/notes/"},{"name":"迪迦","slug":"迪迦","link":"/categories/%E8%BF%AA%E8%BF%A6/"},{"name":"容器技术","slug":"容器技术","link":"/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"},{"name":"奥特曼","slug":"奥特曼","link":"/categories/%E5%A5%A5%E7%89%B9%E6%9B%BC/"},{"name":"it老齐","slug":"it老齐","link":"/categories/it%E8%80%81%E9%BD%90/"},{"name":"微服务","slug":"微服务","link":"/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"spring cloud","slug":"spring-cloud","link":"/categories/spring-cloud/"},{"name":"postgresql","slug":"postgresql","link":"/categories/postgresql/"},{"name":"C++","slug":"C","link":"/categories/C/"},{"name":"centos","slug":"centos","link":"/categories/centos/"},{"name":"util","slug":"util","link":"/categories/util/"},{"name":"cpp","slug":"cpp","link":"/categories/cpp/"},{"name":"vim","slug":"vim","link":"/categories/vim/"},{"name":"shell script","slug":"shell-script","link":"/categories/shell-script/"},{"name":"debian","slug":"debian","link":"/categories/debian/"},{"name":"resource","slug":"resource","link":"/categories/resource/"},{"name":"idea","slug":"idea","link":"/categories/idea/"},{"name":"maozedong","slug":"maozedong","link":"/categories/maozedong/"}],"pages":[{"title":"关于我","text":"90后程序员，爱好打Dota，喜欢迪迦奥特曼，相信光的力量。 个人邮箱：pengkai199393@163.com","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"notes","text":"","link":"/notes/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}]}